<File version="3.1">
  <FileID>212d2697-7c96-41da-b5b1-5d182e05750c</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJJFSURBVHhe7P0FmB3nmbaLzj7n7Ovfe+Af+DMz
yYTJDk0ycTiZZMIcO+A4tmO2bMu2ZEsWq4VNajUzMzMzMzMzr2Zm4X2+qu52ZFtOS7Yst9rvfelW
r1X4VS14n69WrVp/IwiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAh3MGb/+A//kP78
88+nW9nYp587byWKoiiK4h2njV7Hf/TDH6ar2q751/nf//sfii2s7KhsHaJ5YJbm/mla+jSnaFZ/
m0RRFEXxPWjzwAytQ3M3bcvgLE1aLVU1tWVw/f6NuTnvzFtad5vm8DyFlY386le/ZqPMvznPPvt8
epUq/sXNQxTUdlFY30NWXQ+Zyvyabopqusir7RZFURTF94z5Wh0sbyMyrYKI1Ar9740YkVpOYn6D
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
PqmK6wZX1jD0jerldmLAwNKaduvNGetpJCE+jrLGno0hr+PKKkND68u7FayurjI5Nsby/ByrK9oP
KqglX1hlaX5WOXfDLi/MX2f4LItzc1y+dElf7tULKyzNvW656v7y4iKXVpffOO4G3Vy39ndmcoLp
CbU96vaiWt6a2j593Ws3t/z1ZWrt15axpi/j4vLCq/tIW97K0tL6/rq4ypo2/PKamn5e/b3E2uKc
Pu+FNe061Ve5tLyo37/eut5MrQ3atmjbtLk9qyva9sCllUVWlpfX16/2q7YP9duXLrC6rLXlgtre
Oa6qtlxY2tgXKuxp01zZcl9o4xa4tKaWu/k8UOtf3yd/mU5vj2rDxY1tm5+ZZnJ0ZH06bfl6mxRq
/ywvqv1yVbXv8kVW1O3Lly+r+5dZW1LTaPtrYU7fV1rb9LZu7HPVCH1Z2rCl+XkuqjatbWyP3g71
d/P5oy2jd3BIvxjXtS9sURTFa9U+StACh/bRg/bjRNrf+J5JCsdXb20AuLI0iK9FMFoJTHIKUL2j
SWbntMKBeiNUb6BXtFuXmZldUG93V4nxcsI3PJkAF3tKmkdULVZvphe1iS4zMT7Ohfl+vHxiWFZB
YGpmDm2MeptUXGJ5eYkF5eLSxi8jrS6weGH9MonapYkXZocJC4ll6oK+Uh0tAIxpAWB1hZHOJvzc
PYjJKWZ2URU1NWxhYYGlpWW1bKUqeIvqzXZFFTvtzV0bN6/elLVhC6pgzKv7y/o4tV41rTb9yvI8
FTmJeHl6klVar9azqoZtTLO4xKp6058Z7ae2vo1F9aavFbXFBW158yyo8fp6N9atrWtZzau94S+8
2g6tDevt0JyYmGBc7Sft9ooqCj215XiobUorq9PbttlebZkrK6oQau3U23P9ZS6p6XobyvD08KC6
bRhDewNeanmpZfVMDfcT6ulBRGYh3W01JGWWqfbPkpWaQqdhSi+4ndV5uLl5U9FlUAVuVV+mtt8W
1DZq61rUb2tt1/6qfa1tnyqKc6p4a9Nq26Jt02Zbhtvr8PJwp7i+l4neDvzdPIjLr2B6zEC0rxdB
SVn0djaSmJbPkgoJ+RmpNKsAqrWlp+Yv+2JpRQUFtf3a47a5j5fUevXHVz0OS7Nj1NQ0Mr2wrIee
9TZqbV9v94IqvstqOkNfJy0dA6pti0xPTzM6OqpPN68eu/mJQaKDvIhMU8+nqSmSg/zwjoxnZHKG
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
7mSCjb0j/RMTdNWlYm5tR0hiKm2Vxfj4pap5ruKvpq8fu8xibx2lZU3ri1KsjvVSV9tIc3kqiflt
cGGJvLBg7KxtSasopzajUZ+uJbOc4YkV/fb1qCgvJbOomPSKlo0hr+XS6jJLs1M0dvSq1gjCjbFj
AsCVy5eYHe8hJzEAZ38vXKwtcHFzxcbNW/Wic/BVvWgbO08SVQG5pKZ/fQAojXKkqOWvvTG8G8wT
bx+P9rY61ZCAk4spPqHhhEV7c8rGEXMLa86ftsbT25XsomwO7d3F8bPHcY5Ixj/Yn0MmVvgE2GNY
3EZvCZemcDI7iauHO+anTuCXUchAVxl25nuJq+6hrTiQgKgE2pqbCDxtT2xsCP6R+SocmLH7iDGW
9pYcdQ0iSQWGKNdECnK8eOGkEQNjkwRHOeHiHUtcQhap0V7s2rOX86ZnSa4f3Fi5cGNcJMEylKGV
KzTHp5OTXkd1bjol9R16cSktyKKpe5jejlrSi2r1OUaGBxmenKJOTVek3jT0q5deWaE4J5W41EKm
psfIyMimurUPw2A7aVnpnDU6SU7zuD5/b2MZMTmF1CSGceR5J1T2INbLgbMW9rxyzlJfzxW19jK1
7pqOYX35laGenD4SSFdbLZFpudSVqcLtH4JNQCQj84skJ8ZSVt/CjGGGAUMXw1PTdKti3DY0Sk9n
AzEJiRjmL9LTkEdUVBSGmQuqzQs4nTQnp7qd9r4OfIN8KO0aY2nGQHdjAU6B4UwvrTE5qgp7XCzP
PX6EtuFWXnjoYUr7V7gy10ZEWgEDteUERqTT3lhMcno5JRkxhCcXMdbfgPkJR9r6eujsriHIOJTx
qSliLPxp7p/X90VPYykRqbmsXrpCWW4yuTWtxMdF4xQQhEtCMcuzBrUvc5lbg+76ImJzS8iO8cHM
LojW4SnWFqeIio2mZ2SSzuYKYlMyGZ9f0B+b4s3HRhAUOyYAjA+24eXvT2x0ME52Fnj7xlJeXk6A
ny0eFnHUVZSpN64yMhOS9Y8FXv8RgI1vKJNLb9JteNdYIOikBy09XUQFeuPoeJ74wgoKM/151s5L
PTgNFAaW0dqexSkVeNw93XE2exFjz2jcAgMIL26hPN2O9qnt84ofbijA3SNUf2z8XS0wc7DD8qwR
vn6eKqx4qjfH/Th6RjI2OUyGd54+T0lSLOGqp2dlbU9wfBwuaRmUFFZTnlBHbUMaLv5+2Dvb4ZOS
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</Preview>
  <Form>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
XZn7ro4CfpvG9T//H6GeuH/brAIA</Form>
  <Code><![CDATA[Add-Type -AssemblyName PresentationCore, PresentationFramework

##############################
# change these with your own #
##############################

$SQLServer = "xxx"
$SQLDatabase = "xxxx"
$SQLTableOperations = "Operations"
$SQLTableCollections = "Collections"

$SQLUsername = "xxx" # sql account with right to read/write on the database tables above
$SQLPassword = "yyy" # sql account password

$SCCMUserCollectionFilter = "WASH" # leave this empty if you want all the collections. The filter applies to collection name
$SCCMDeviceCollectionFilter = "SPIN" # leave this empty if you want all the collections. The filter applies to collection name

$SCCMServer = "xxx" 
$SCCMSiteID = "yyy"

$ADDomain = "zzz" # your AD domain name like "contoso.com"
$ADGroup = "zzz" # this is the AD group the user should be member of to be allowed to use the app

$actualDate = Get-Date -Format "yyyyMMdd"
$logFile = "C:\temp\WASH_log_$actualDate.txt"

#############################



$secpasswd = ConvertTo-SecureString $SQLUsername -AsPlainText -Force
$secpasswd.MakeReadOnly()
$sqlCred = New-Object System.Data.SqlClient.SqlCredential($SQLPassword, $secpasswd)

$connectionstring = "Server=$SQLServer;Database=$SQLDatabase;"
$connection = New-Object System.Data.SqlClient.SqlConnection
$connection.ConnectionString = $connectionstring
$connection.Credential = $sqlCred

$global:myReturnedUserCollections = $null
$global:myReturnedDeviceCollections = $null
$global:myReturnedUserTempOperations = $null
$global:myReturnedDeviceTempOperations = $null
$global:myReturnedOperations = $null
$global:importUserButtonUsed = $null
$global:importDeviceButtonUsed = $null
$global:myUsers = $null
$global:myDevices = $null


#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Update-ComboBox
{
	
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
	
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}
#endregion

function IsValidEmail
{
	param ([string]$EmailAddress)
	
	<#try
	{
		$null = [mailaddress]$EmailAddress
		return $true
	}
	catch
	{
		return $false
	}#>
	
	$EmailRegex = '^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$'
	
	$DidItMatch = $EmailAddress -match $EmailRegex
	if ($DidItMatch)
	{
		return $true
	}
	else
	{
		return $false
	}
}

function WriteLog
{
	[CmdletBinding()]
	Param
	(
		[Parameter(Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true)]
		[ValidateNotNullOrEmpty()]
		[Alias("LogContent")]
		[string]$Message
	)
	
	$LogTime = Get-Date -Format "MM-dd-yyyy_hh-mm-ss"
	Add-Content $logFile "[$LogTime] $Message"
	Write-Host "[$LogTime] $Message"
}

function insertUserDB ($UserOperationName, $collectionName, $collectionID, $userSamID, $notificationEmail, $deploymentDate, $deploymentTime, $adddedBy, $userUPN, $userEmail, $sendEmailToUser)
{
	$statusbar1.Text = "Inserting data to DB ... "
	$myID = ""
	
	if ([string]::IsNullOrEmpty($userEmail)) { $userEmail = "None"}
		
	try
	{
		$connection.Open()
		$insertQuery = "INSERT INTO $SQLTableOperations(OperationName,CollectionName,CollectionID,UserSamID,UserUPN,UserEmail,NotificationEmail,DeploymentDate,DeploymentTime,Executed,SendEmailToUser,addedBy) OUTPUT Inserted.Id VALUES(@operationName,@collectionName,@collectionID,@userSamID,@userUPN,@userEmail,@notificationEmail,@deploymentDate,@deploymentTime,@executed,@sendEmailToUser,@addedBy)"
		$command = $connection.CreateCommand()
		$command.CommandText = $insertQuery
		$command.Parameters.Add("@operationName", $UserOperationName) | Out-Null
		$command.Parameters.Add("@collectionName", $collectionName) | Out-Null
		$command.Parameters.Add("@collectionID", $collectionID) | Out-Null
		$command.Parameters.Add("@userSamID", $userSamID) | Out-Null
		$command.Parameters.Add("@userUPN", $userUPN) | Out-Null
		$command.Parameters.Add("@userEmail", $userEmail) | Out-Null
		$command.Parameters.Add("@notificationEmail", $notificationEmail) | Out-Null
		$command.Parameters.Add("@deploymentDate", $deploymentDate) | Out-Null
		$command.Parameters.Add("@deploymentTime", $deploymentTime) | Out-Null
		$command.Parameters.Add("@executed", "Temp") | Out-Null
		$command.Parameters.Add("@sendEmailToUser", $sendEmailToUser) | Out-Null
		$command.Parameters.Add("@addedBy", $adddedBy) | Out-Null
		$myID = $command.ExecuteScalar()
		$connection.Close()
	}
	catch
	{
		WriteLog -Message "Error inserting User in DB: $_"
		$connection.Close()
	}
	
	WriteLog -Message "inserted user ID: $myID"
	
	return $myID
}

function insertDeviceDB ($DeviceOperationName, $collectionName, $collectionID, $computerName, $notificationEmail, $deploymentDate, $deploymentTime, $adddedBy)
{
	$statusbar1.Text = "Inserting data to DB ... "
	$myID = ""
	
	try
	{
		$connection.Open()
		$insertQuery = "INSERT INTO $SQLTableOperations(OperationName,CollectionName,CollectionID,ComputerName,NotificationEmail,DeploymentDate,DeploymentTime,Executed,addedBy) OUTPUT Inserted.Id VALUES(@operationName,@collectionName,@collectionID,@computerName,@notificationEmail,@deploymentDate,@deploymentTime,@executed,@addedBy)"
		$command = $connection.CreateCommand()
		$command.CommandText = $insertQuery
		$command.Parameters.Add("@operationName", $DeviceOperationName) | Out-Null
		$command.Parameters.Add("@collectionName", $collectionName) | Out-Null
		$command.Parameters.Add("@collectionID", $collectionID) | Out-Null
		$command.Parameters.Add("@computerName", $computerName) | Out-Null
		$command.Parameters.Add("@notificationEmail", $notificationEmail) | Out-Null
		$command.Parameters.Add("@deploymentDate", $deploymentDate) | Out-Null
		$command.Parameters.Add("@deploymentTime", $deploymentTime) | Out-Null
		$command.Parameters.Add("@executed", "Temp") | Out-Null
		$command.Parameters.Add("@addedBy", $adddedBy) | Out-Null
		$myID = $command.ExecuteScalar()
		$connection.Close()
	}
	catch
	{
		WriteLog -Message "Error inserting Device in DB: $_"
	}
	
	WriteLog -Message "inserted device ID: $myID"
	
	return $myID
}

function updateDB ($requestType, $selectedSQLId)
{
	$statusbar1.Text = "Updating data in DB ... "
	WriteLog -Message "updateDB: $requestType - $selectedSQLId"
	$deletedBy = $env:username
	$deletedOn = Get-Date
	WriteLog -Message "updateDB: $deletedBy - $deletedOn"
	
	try
	{
		if (-not [string]::IsNullOrEmpty($selectedSQLId))
		{
			if ($requestType.Trim() -eq "RemoveFromTemp")
			{
				WriteLog -Message "RemoveFromTemp"
				$connection.Open()
				$UpdateQuery = "UPDATE $SQLTableOperations SET deletedBy='$deletedBy', deletedOn='$deletedOn' WHERE Id='$selectedSQLId'"
				$command = $connection.CreateCommand()
				$command.CommandText = $UpdateQuery
				$result = $command.ExecuteReader()
				$connection.Close()
			}
			elseif ($requestType.Trim() -eq "CommitToSCCM")
			{
				WriteLog -Message "CommitToSCCM"
				
				$connection.Open()
				$UpdateQuery = "UPDATE $SQLTableOperations SET Executed='No', commitedBy='$deletedBy', commitedOn='$deletedOn' WHERE Id='$selectedSQLId'"
				$command = $connection.CreateCommand()
				$command.CommandText = $UpdateQuery
				$result = $command.ExecuteReader()
				$connection.Close()
			}
			else
			{
				WriteLog -Message "No known requestType found"
			}
		}
	}
	catch
	{
		WriteLog -Message "Error updating data in DB: $_"
		$connection.Close()
	}
}

function getOperations
{
	$statusbar1.Text = "Getting operations from DB ... "
	$myOperationsList = @()
	
	try
	{
		$connection.Open()
		$CheckQuery = "SELECT * FROM $SQLTableOperations WHERE Executed<>'Temp' AND deletedBy IS NULL"
		$command = $connection.CreateCommand()
		$command.CommandText = $CheckQuery
		$result = $command.ExecuteReader()
		
		$CheckResult = New-Object System.Data.DataTable
		$CheckResult.Load($result)
		$connection.Close()
		
		$myResult = ""
		$rowsReturned = $CheckResult.Rows.Count
		WriteLog -Message "Operations entries found for all operations: $rowsReturned"
		$statusbar1.Text = "Getting operations from DB ... $rowsReturned entries found"
		
		$progressbaroverlay1.Visible = $true
		$progressbaroverlay1.Maximum = $rowsReturned
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		
		if ($rowsReturned -gt 0)
		{
			foreach ($entry in $CheckResult)
			{
				$UserOperationName = $entry.OperationName
				$collectionName = $entry.CollectionName
				$userName = $entry.UserSamID
				$installDate = $entry.DeploymentDate
				$installTime = $entry.DeploymentTime
				$executed = $entry.Executed
				$error = $entry.Error
				$addedBy = $entry.addedBy
				$sqlID = $entry.Id
				$notificationEmail = $entry.NotificationEmail
				$userUPN = $entry.UserUPN
				
				$installDateTime = $installDate + $installTime
				
				$operation = New-Object System.Object
				$operation | Add-Member -MemberType NoteProperty -Name "OperationName" -Value $UserOperationName
				$operation | Add-Member -MemberType NoteProperty -Name "CollectionName" -Value $collectionName
				$operation | Add-Member -MemberType NoteProperty -Name "UserSamID" -Value $userName
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentDate" -Value $installDate
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentTime" -Value $installTime
				$operation | Add-Member -MemberType NoteProperty -Name "Executed" -Value $executed
				$operation | Add-Member -MemberType NoteProperty -Name "Error" -Value $error
				$operation | Add-Member -MemberType NoteProperty -Name "addedBy" -Value $addedBy
				$operation | Add-Member -MemberType NoteProperty -Name "Id" -Value $sqlID
				$operation | Add-Member -MemberType NoteProperty -Name "NotificationEmail" -Value $notificationEmail
				$operation | Add-Member -MemberType NoteProperty -Name "UserUPN" -Value $userUPN
				
				$myOperationsList += $operation
				
				$progressbaroverlay1.Increment(1)
				
			}
		}
	}
	catch
	{
		WriteLog -Message "Error getting operations from DB: $_"
		$connection.Close()
	}
	
	$progressbaroverlay1.Visible = $false
	$statusbar1.Text = "Getting operations from DB ... Done"
	
	return $myOperationsList
}

function getOperationsLastMonth
{
	$statusbar1.Text = "Getting last month operations from DB ..."
	$myOperationsList = @()
	$actualDate = Get-Date
	$lastMonth = $actualDate.AddMonths(-1)
	$lastMonthString = $lastMonth.ToString("yyyy-MM-ddTHH:mm:ss")
	WriteLog -Message "actualDate: $actualDate"
	WriteLog -Message "lastMonth: $lastMonth"
	WriteLog -Message "lastMonthString: $lastMonthString"
	
	try
	{
		$connection.Open()
		$CheckQuery = "SELECT * FROM $SQLTableOperations WHERE Executed<>'Temp' AND DeploymentDate>='$lastMonth' AND deletedBy IS NULL"
		$command = $connection.CreateCommand()
		$command.CommandText = $CheckQuery
		$result = $command.ExecuteReader()
		
		$CheckResult = New-Object System.Data.DataTable
		$CheckResult.Load($result)
		$connection.Close()
		
		$myResult = ""
		$rowsReturned = $CheckResult.Rows.Count
		WriteLog -Message "Operations entries found for last month operations: $rowsReturned"
		$statusbar1.Text = "Getting last month operations from DB ...$rowsReturned entries found "
		
		$progressbaroverlay1.Visible = $true
		$progressbaroverlay1.Maximum = $rowsReturned
		$progressbaroverlay1.Step = 1
		$progressbaroverlay1.Value = 0
		
		if ($rowsReturned -gt 0)
		{
			foreach ($entry in $CheckResult)
			{
				$UserOperationName = $entry.OperationName
				$collectionName = $entry.CollectionName
				$userName = $entry.UserSamID
				$computerName = $entry.ComputerName
				$installDate = $entry.DeploymentDate
				$installTime = $entry.DeploymentTime
				$executed = $entry.Executed
				$error = $entry.Error
				$addedBy = $entry.addedBy
				$sqlID = $entry.Id
				$notificationEmail = $entry.NotificationEmail
				$userUPN = $entry.UserUPN
				
				$installDateTime = $installDate + $installTime
				
				$operation = New-Object System.Object
				$operation | Add-Member -MemberType NoteProperty -Name "OperationName" -Value $UserOperationName
				$operation | Add-Member -MemberType NoteProperty -Name "CollectionName" -Value $collectionName
				$operation | Add-Member -MemberType NoteProperty -Name "UserSamID" -Value $userName
				$operation | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computerName
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentDate" -Value $installDate
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentTime" -Value $installTime
				$operation | Add-Member -MemberType NoteProperty -Name "Executed" -Value $executed
				$operation | Add-Member -MemberType NoteProperty -Name "Error" -Value $error
				$operation | Add-Member -MemberType NoteProperty -Name "addedBy" -Value $addedBy
				$operation | Add-Member -MemberType NoteProperty -Name "Id" -Value $sqlID
				$operation | Add-Member -MemberType NoteProperty -Name "NotificationEmail" -Value $notificationEmail
				$operation | Add-Member -MemberType NoteProperty -Name "UserUPN" -Value $userUPN
				
				$myOperationsList += $operation
				
				$progressbaroverlay1.Increment(1)
			}
		}
	}
	catch
	{
		WriteLog -Message "Error getting last month operations from DB: $_"
		$connection.Close()
	}
	
	$progressbaroverlay1.Visible = $false
	$statusbar1.Text = "Getting last month operations from DB ... Done"
	
	return $myOperationsList
}

function getUserTempOperations($mySamID)
{
	$statusbar1.Text = "Getting User Temp operations from DB ..."
	$actualUser = $env:username
	WriteLog -Message "getting user Temp operations for: $actualUser"
	$myOperationsList = @()
	
	try
	{
		$connection.Open()
		$CheckQuery = "SELECT * FROM $SQLTableOperations WHERE (Executed='Temp' AND addedBy='$actualUser' AND deletedBy IS NULL) AND (OperationName='AddUser' OR OperationName='RemoveUser')"
		$command = $connection.CreateCommand()
		$command.CommandText = $CheckQuery
		$result = $command.ExecuteReader()
		
		$CheckResult = New-Object System.Data.DataTable
		$CheckResult.Load($result)
		$connection.Close()
		
		$myResult = ""
		$rowsReturned = $CheckResult.Rows.Count
		WriteLog -Message "Operations entries found for user temp operations: $rowsReturned"
		$statusbar1.Text = "Getting user Temp operations from DB ... $rowsReturned entries found"
		
		if ($rowsReturned -gt 0)
		{
			foreach ($entry in $CheckResult)
			{
				$UserOperationName = $entry.OperationName
				$collectionName = $entry.CollectionName
				$userName = $entry.UserSamID
				$installDate = $entry.DeploymentDate
				$installTime = $entry.DeploymentTime
				$executed = $entry.Executed
				$error = $entry.Error
				$addedBy = $entry.addedBy
				$sqlID = $entry.Id
				$notificationEmail = $entry.NotificationEmail
				$userUPN = $entry.UserUPN
				$userEmail = $entry.UserEmail
				$sendEmailToUser = $entry.SendEmailToUser
				
				$installDateTime = $installDate + $installTime
				
				$operation = New-Object System.Object
				$operation | Add-Member -MemberType NoteProperty -Name "OperationName" -Value $UserOperationName
				$operation | Add-Member -MemberType NoteProperty -Name "CollectionName" -Value $collectionName
				$operation | Add-Member -MemberType NoteProperty -Name "UserSamID" -Value $userName
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentDate" -Value $installDate
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentTime" -Value $installTime
				$operation | Add-Member -MemberType NoteProperty -Name "Executed" -Value $executed
				$operation | Add-Member -MemberType NoteProperty -Name "Error" -Value $error
				$operation | Add-Member -MemberType NoteProperty -Name "addedBy" -Value $addedBy
				$operation | Add-Member -MemberType NoteProperty -Name "Id" -Value $sqlID
				$operation | Add-Member -MemberType NoteProperty -Name "NotificationEmail" -Value $notificationEmail
				$operation | Add-Member -MemberType NoteProperty -Name "UserUPN" -Value $userUPN
				$operation | Add-Member -MemberType NoteProperty -Name "UserEmail" -Value $userEmail
				$operation | Add-Member -MemberType NoteProperty -Name "SendEmailToUser" -Value $sendEmailToUser
				
				$myOperationsList += $operation
			}
		}
	}
	catch
	{
		WriteLog -Message "Error getting User Temp operations from DB: $_"
		$connection.Close()
	}
	
	$statusbar1.Text = "Getting user Temp operations from DB ... Done"
	
	return $myOperationsList
}

function getDeviceTempOperations($mySamID)
{
	$statusbar1.Text = "Getting Device Temp operations from DB ..."
	$actualUser = $env:username
	WriteLog -Message "getting device Temp operations for: $actualUser"
	$myOperationsList = @()
	
	try
	{
		$connection.Open()
		$CheckQuery = "SELECT * FROM $SQLTableOperations WHERE Executed='Temp' AND addedBy='$actualUser' AND deletedBy IS NULL AND (OperationName='AddDevice' OR OperationName='RemoveDevice')"
		$command = $connection.CreateCommand()
		$command.CommandText = $CheckQuery
		$result = $command.ExecuteReader()
		
		$CheckResult = New-Object System.Data.DataTable
		$CheckResult.Load($result)
		$connection.Close()
		
		$myResult = ""
		$rowsReturned = $CheckResult.Rows.Count
		WriteLog -Message "Operations entries found for device temp operations: $rowsReturned"
		$statusbar1.Text = "Getting device Temp operations from DB ... $rowsReturned entries found"
		
		if ($rowsReturned -gt 0)
		{
			foreach ($entry in $CheckResult)
			{
				$UserOperationName = $entry.OperationName
				$collectionName = $entry.CollectionName
				$userName = $entry.ComputerName
				$installDate = $entry.DeploymentDate
				$installTime = $entry.DeploymentTime
				$executed = $entry.Executed
				$error = $entry.Error
				$addedBy = $entry.addedBy
				$sqlID = $entry.Id
				$notificationEmail = $entry.NotificationEmail
				$userUPN = $entry.UserUPN
				
				$installDateTime = $installDate + $installTime
				
				$operation = New-Object System.Object
				$operation | Add-Member -MemberType NoteProperty -Name "OperationName" -Value $UserOperationName
				$operation | Add-Member -MemberType NoteProperty -Name "CollectionName" -Value $collectionName
				$operation | Add-Member -MemberType NoteProperty -Name "UserSamID" -Value $userName
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentDate" -Value $installDate
				$operation | Add-Member -MemberType NoteProperty -Name "DeploymentTime" -Value $installTime
				$operation | Add-Member -MemberType NoteProperty -Name "Executed" -Value $executed
				$operation | Add-Member -MemberType NoteProperty -Name "Error" -Value $error
				$operation | Add-Member -MemberType NoteProperty -Name "addedBy" -Value $addedBy
				$operation | Add-Member -MemberType NoteProperty -Name "Id" -Value $sqlID
				$operation | Add-Member -MemberType NoteProperty -Name "NotificationEmail" -Value $notificationEmail
				$operation | Add-Member -MemberType NoteProperty -Name "UserUPN" -Value $userUPN
				
				$myOperationsList += $operation
			}
		}
	}
	catch
	{
		WriteLog -Message "Error getting device Temp operations from DB: $_"
		$connection.Close()
	}
	
	$statusbar1.Text = "Getting device Temp operations from DB ... Done"
	
	return $myOperationsList
}

function getUserCollections
{
	$statusbar1.Text = "Getting User SCCM collections ... "
	WriteLog -Message "getting user collections"
	$collectionList = @()
	
	try
	{
		$connection.Open()
		$CheckQuery = "SELECT * FROM $SQLTableCollections WHERE CollectionName LIKE '%$SCCMUserCollectionFilter%' AND deletedBy IS NULL"
		$command = $connection.CreateCommand()
		$command.CommandText = $CheckQuery
		$result = $command.ExecuteReader()
		
		$CheckResult = New-Object System.Data.DataTable
		$CheckResult.Load($result)
		$connection.Close()
		
		$myResult = ""
		$rowsReturned = $CheckResult.Rows.Count
		WriteLog -Message "User colections entries found: $rowsReturned"
		$statusbar1.Text = "Getting User SCCM collections ... $rowsReturned entries found"
		
		if ($rowsReturned -gt 0)
		{
			foreach ($entry in $CheckResult)
			{
				$collectionName = $entry.CollectionName
				$collectionID = $entry.CollectionID
				$collectionFriendlyName = $entry.CollectionFriendlyName
				$collectionComment = $entry.CollectionComment
				#WriteLog -Message $collectionID - $collectionName
				
				$collection = New-Object System.Object
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionName" -Value $collectionName
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionID" -Value $collectionID
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionFriendlyName" -Value $collectionFriendlyName
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionComment" -Value $collectionComment
				
				$collectionList += $collection
				
			}
		}
	}
	catch
	{
		WriteLog -Message "Error getting user SCCM collections from DB: $_"
		$connection.Close()
	}
	
	$statusbar1.Text = "Getting User SCCM collections ... Done"
	
	return $collectionList
}

function getDeviceCollections
{
	$statusbar1.Text = "Getting Device SCCM collections ... "
	WriteLog -Message "getting Device Collections"
	$collectionList = @()
	
	try
	{
		$connection.Open()
		$CheckQuery = "SELECT * FROM $SQLTableCollections WHERE CollectionName LIKE '%$SCCMDeviceCollectionFilter%' AND deletedBy IS NULL"
		$command = $connection.CreateCommand()
		$command.CommandText = $CheckQuery
		$result = $command.ExecuteReader()
		
		$CheckResult = New-Object System.Data.DataTable
		$CheckResult.Load($result)
		$connection.Close()
		
		$myResult = ""
		$rowsReturned = $CheckResult.Rows.Count
		WriteLog -Message "Device colections entries found: $rowsReturned"
		$statusbar1.Text = "Getting Device SCCM collections ... $rowsReturned entries found"
		
		if ($rowsReturned -gt 0)
		{
			foreach ($entry in $CheckResult)
			{
				$collectionName = $entry.CollectionName
				$collectionID = $entry.CollectionID
				$collectionFriendlyName = $entry.CollectionFriendlyName
				$collectionComment = $entry.CollectionComment
				#WriteLog -Message $collectionID - $collectionName
				
				$collection = New-Object System.Object
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionName" -Value $collectionName
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionID" -Value $collectionID
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionFriendlyName" -Value $collectionFriendlyName
				$collection | Add-Member -MemberType NoteProperty -Name "CollectionComment" -Value $collectionComment
				
				$collectionList += $collection
				
			}
		}
	}
	catch
	{
		WriteLog -Message "Error getting device sccm collections from DB: $_"
		$connection.Close()
	}
	
	$statusbar1.Text = "Getting Device SCCM collections ... Done"
	
	return $collectionList
}


function displayUserCollections($myFullCollectionList)
{
	$statusbar1.Text = "Displaying User collections ..."
	WriteLog -Message "Start displaying the user collections"
	
	try
	{
		$datagridviewUser.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridviewUser.ColumnCount = 4
		$datagridviewUser.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridviewUser.Columns[0].Name = "Collection Name"
		$datagridviewUser.Columns[1].Name = "SCCM Comment"
		$datagridviewUser.Columns[2].Name = "Comment"
		$datagridviewUser.Columns[3].Name = "Collection ID"
		
		$datagridviewUser.Columns[0].Width = 400
		$datagridviewUser.Columns[1].Width = 150
		$datagridviewUser.Columns[2].Width = 300
		$datagridviewUser.Columns[3].Width = 100
		
		if (![string]::IsNullOrEmpty($myFullCollectionList))
		{
			foreach ($entry in $myFullCollectionList)
			{
				$row = @()
				$collectionName = $entry.CollectionName
				$collectionID = $entry.CollectionID
				$collectionFriendlyName = $entry.CollectionFriendlyName
				$collectionComment = $entry.CollectionComment
				#WriteLog -Message "$collectionID - $collectionName"
				
				$row = @($collectionName, $collectionFriendlyName, $collectionComment, $collectionID)
				
				$datagridviewUser.Rows.Add($row)
			}
			
			$datagridviewUser.Sort($datagridviewUser.Columns[0], 'Ascending')
		}
		else
		{
			WriteLog -Message "User Collection List is empty"
		}
	}
	catch
	{
		WriteLog -Message "Error displaying user collections: $_"
	}
	
	$statusbar1.Text = "Displaying user collections ... Done"
	WriteLog -Message "End displaying the user collections"
}

function displayDeviceCollections($myFullCollectionList)
{
	$statusbar1.Text = "Displaying device collections ..."
	WriteLog -Message "Start displaying the device collections"
	
	try
	{
		$datagridviewDevice.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridviewDevice.ColumnCount = 3
		$datagridviewDevice.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridviewDevice.Columns[0].Name = "Collection Name"
		$datagridviewDevice.Columns[1].Name = "SCCM Comment"
		#$datagridviewDevice.Columns[2].Name = "DB Comment"
		$datagridviewDevice.Columns[2].Name = "Collection ID"
		
		$datagridviewDevice.Columns[0].Width = 400
		$datagridviewDevice.Columns[1].Width = 450
		#$datagridviewDevice.Columns[2].Width = 150
		$datagridviewDevice.Columns[2].Width = 100
		
		if (![string]::IsNullOrEmpty($myFullCollectionList))
		{
			foreach ($entry in $myFullCollectionList)
			{
				$row = @()
				$collectionName = $entry.CollectionName
				$collectionID = $entry.CollectionID
				$collectionFriendlyName = $entry.CollectionFriendlyName
				$collectionComment = $entry.CollectionComment
				#WriteLog -Message "$collectionID - $collectionName"
				
				#$row = @($collectionName, $collectionFriendlyName, $collectionComment, $collectionID)
				$row = @($collectionName, $collectionFriendlyName, $collectionID)
				
				$datagridviewDevice.Rows.Add($row)
			}
			
			$datagridviewDevice.Sort($datagridviewDevice.Columns[0], 'Ascending')
		}
		else
		{
			WriteLog -Message "Device Collection List is empty"
		}
	}
	catch
	{
		WriteLog -Message "Error displaying device collections: $_"
	}
	
	$statusbar1.Text = "Displaying device collections ... Done"
	WriteLog -Message "End displaying the device collections"
}

function displayUserTempOperations($myFullOperationsList)
{
	$statusbar1.Text = "Displaying User Temp operations ... "
	
	try
	{
		$datagridviewTempUsers.Rows.Clear()
		
		$datagridviewTempUsers.ColumnCount = 10
		$datagridviewTempUsers.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridviewTempUsers.Columns[0].Name = "Operation"
		$datagridviewTempUsers.Columns[1].Name = "Collection Name"
		$datagridviewTempUsers.Columns[2].Name = "User"
		$datagridviewTempUsers.Columns[3].Name = "Install Date"
		$datagridviewTempUsers.Columns[4].Name = "Added By"
		$datagridviewTempUsers.Columns[5].Name = "SqlId"
		$datagridviewTempUsers.Columns[5].Visible = $false
		$datagridviewTempUsers.Columns[6].Name = "NotificationEmail"
		$datagridviewTempUsers.Columns[6].Visible = $false
		$datagridviewTempUsers.Columns[7].Name = "UserUPN"
		$datagridviewTempUsers.Columns[7].Visible = $false
		$datagridviewTempUsers.Columns[8].Name = "UserEmail"
		$datagridviewTempUsers.Columns[8].Visible = $false
		$datagridviewTempUsers.Columns[9].Name = "SendEmail"
		#$datagridviewTempUsers.Columns[9].Visible = $false
		
		$datagridviewTempUsers.Columns[0].Width = 100
		$datagridviewTempUsers.Columns[1].Width = 300
		$datagridviewTempUsers.Columns[2].Width = 200
		$datagridviewTempUsers.Columns[3].Width = 200
		$datagridviewTempUsers.Columns[4].Width = 100
		$datagridviewTempUsers.Columns[5].Width = 1
		$datagridviewTempUsers.Columns[6].Width = 1
		$datagridviewTempUsers.Columns[7].Width = 1
		$datagridviewTempUsers.Columns[8].Width = 1
		$datagridviewTempUsers.Columns[9].Width = 70
		
		$myTempOperationsList = $myFullOperationsList | where { $_.Executed -eq "Temp" }
		
		foreach ($entry in $myTempOperationsList)
		{
			$row = @()
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			$notificationEmail = $entry.NotificationEmail
			$userUPN = $entry.UserUPN
			$userEmail = $entry.UserEmail
			$sendEmailToUser = $entry.SendEmailToUser
			
			$installDateTime = $installDate + $installTime
			
			$row = @($UserOperationName, $collectionName, $userName, $installDateTime, $addedBy, $sqlID, $notificationEmail, $userUPN, $userEmail, $sendEmailToUser)
			$datagridviewTempUsers.Rows.Add($row)
		}
		
		$datagridviewTempUsers.Sort($datagridviewTempUsers.Columns[0], 'Ascending')
	}
	catch
	{
		WriteLog -Message "Error displaying user temp operations: $_"
	}
	
	$statusbar1.Text = "Displaying User Temp operations ... Done"
}

function displayDeviceTempOperations($myFullOperationsList)
{
	$statusbar1.Text = "Displaying Device Temp operations ... "
	
	try
	{
		$datagridviewTempDevices.Rows.Clear()
		
		$datagridviewTempDevices.ColumnCount = 8
		$datagridviewTempDevices.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridviewTempDevices.Columns[0].Name = "Operation"
		$datagridviewTempDevices.Columns[1].Name = "Collection Name"
		$datagridviewTempDevices.Columns[2].Name = "Computer"
		$datagridviewTempDevices.Columns[3].Name = "Install Date"
		$datagridviewTempDevices.Columns[4].Name = "Added By"
		$datagridviewTempDevices.Columns[5].Name = "SqlId"
		$datagridviewTempDevices.Columns[5].Visible = $false
		$datagridviewTempDevices.Columns[6].Name = "NotificationEmail"
		$datagridviewTempDevices.Columns[6].Visible = $false
		$datagridviewTempDevices.Columns[7].Name = "UserUPN"
		$datagridviewTempDevices.Columns[7].Visible = $false
		
		$datagridviewTempDevices.Columns[0].Width = 100
		$datagridviewTempDevices.Columns[1].Width = 370
		$datagridviewTempDevices.Columns[2].Width = 200
		$datagridviewTempDevices.Columns[3].Width = 200
		$datagridviewTempDevices.Columns[4].Width = 100
		$datagridviewTempDevices.Columns[5].Width = 1
		$datagridviewTempDevices.Columns[6].Width = 1
		$datagridviewTempDevices.Columns[7].Width = 1
		
		$myTempOperationsList = $myFullOperationsList | where { $_.Executed -eq "Temp" }
		
		foreach ($entry in $myTempOperationsList)
		{
			$row = @()
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			$notificationEmail = $entry.NotificationEmail
			$userUPN = $entry.UserUPN
			
			$installDateTime = $installDate + $installTime
			
			$row = @($UserOperationName, $collectionName, $userName, $installDateTime, $addedBy, $sqlID, $notificationEmail, $userUPN)
			$datagridviewTempDevices.Rows.Add($row)
		}
		
		$datagridviewTempDevices.Sort($datagridviewTempDevices.Columns[0], 'Ascending')
	}
	catch
	{
		WriteLog -Message "Error displaying device temp: $_"
	}
	
	$statusbar1.Text = "Displaying Device Temp operations ... Done"
}

function displaySCCMCurrent($myFullOperationsList)
{
	$statusbar1.Text = "Displaying Current SCCM operations ... "
	
	try
	{
		$datagridview2.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridview2.ColumnCount = 6
		$datagridview2.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridview2.Columns[0].Name = "Operation"
		$dataGridView2.Columns[1].Name = "Collection Name"
		$dataGridView2.Columns[2].Name = "User/Computer"
		$dataGridView2.Columns[3].Name = "Install Date"
		$dataGridView2.Columns[4].Name = "Added By"
		$datagridview2.Columns[5].Name = "SqlId"
		$datagridview2.Columns[5].Visible = $false
		
		$myNotExecutedOperationsList = $myFullOperationsList | where { $_.Executed -eq "No" }
		
		foreach ($entry in $myNotExecutedOperationsList)
		{
			$row = @()
			$userOrComputerName = ""
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$computerName = $entry.ComputerName
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			
			$installDateTime = $installDate + $installTime
			if ($userName -eq "None") { $userOrComputerName = $computerName }
			elseif ($computerName -eq "None") { $userOrComputerName = $userName }
			
			$row = @($UserOperationName, $collectionName, $userOrComputerName, $installDateTime, $addedBy, $sqlID)
			$dataGridView2.Rows.Add($row)
		}
		
		$dataGridView2.Sort($dataGridView2.Columns[3], 'Descending')
	}
	catch
	{
		WriteLog -Message "Error displaying current sccm operations: $_"
	}
	
	$statusbar1.Text = "Displaying Current SCCM operations ... Done"
}

function displaySCCMCompleted($myFullOperationsList)
{
	$statusbar1.Text = "Displaying Completed SCCM operations ... Done"
	
	try
	{
		$datagridview3.Rows.Clear()
		$actualDate = Get-Date
		$lastMonth = $actualDate.AddMonths(-1)
		$lastMonthString = $lastMonth.ToString("yyyy-MM-ddTHH:mm:ss")
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridview3.ColumnCount = 6
		$datagridview3.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridview3.Columns[0].Name = "Operation"
		$dataGridView3.Columns[1].Name = "Collection Name"
		$dataGridView3.Columns[2].Name = "User/Computer"
		$dataGridView3.Columns[3].Name = "Install Date"
		$dataGridView3.Columns[4].Name = "Added By"
		$datagridview3.Columns[5].Name = "SqlId"
		$datagridview3.Columns[5].Visible = $false
		
		$myCompletedOperationsList = $myFullOperationsList | where { $_.Executed -eq "Yes" -and $_.Error -eq "None" -and $_.DeploymentDate -gt $lastMonthString }
		
		foreach ($entry in $myCompletedOperationsList)
		{
			$row = @()
			$userOrComputerName = ""
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$computerName = $entry.ComputerName
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			
			$installDateTime = $installDate + $installTime
			if ($userName -eq "None") { $userOrComputerName = $computerName }
			elseif ($computerName -eq "None") { $userOrComputerName = $userName }
			
			$row = @($UserOperationName, $collectionName, $userOrComputerName, $installDateTime, $addedBy, $sqlID)
			$dataGridView3.Rows.Add($row)
			
		}
		
		$dataGridView3.Sort($dataGridView3.Columns[3], 'Descending')
	}
	catch
	{
		WriteLog -Message "Error displaying completed sccm operations: $_"
	}
	
	$statusbar1.Text = "Displaying Completed SCCM operations ... Done"
}

function displaySCCMFailed($myFullOperationsList)
{
	$statusbar1.Text = "Displaying Failed SCCM operations ... "
	
	try
	{
		$datagridview4.Rows.Clear()
		$actualDate = Get-Date
		$lastMonth = $actualDate.AddMonths(-1)
		$lastMonthString = $lastMonth.ToString("yyyy-MM-ddTHH:mm:ss")
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridview4.ColumnCount = 7
		$datagridview4.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridview4.Columns[0].Name = "Operation"
		$dataGridView4.Columns[1].Name = "Collection Name"
		$dataGridView4.Columns[2].Name = "User/Computer"
		$dataGridView4.Columns[3].Name = "Install Date"
		$dataGridView4.Columns[4].Name = "Added By"
		$datagridview4.Columns[5].Name = "SqlId"
		$datagridview4.Columns[5].Visible = $false
		$dataGridView4.Columns[6].Name = "Error"
		
		$myFailedOperationsList = $myFullOperationsList | where { $_.Executed -eq "Yes" -and $_.Error -ne "None" -and $_.DeploymentDate -gt $lastMonthString }
		
		foreach ($entry in $myFailedOperationsList)
		{
			$row = @()
			$userOrComputerName = ""
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$computerName = $entry.ComputerName
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			$errors = $entry.Error
			
			$installDateTime = $installDate + $installTime
			if ($userName -eq "None") { $userOrComputerName = $computerName }
			elseif ($computerName -eq "None") { $userOrComputerName = $userName }
			
			$row = @($UserOperationName, $collectionName, $userOrComputerName, $installDateTime, $addedBy, $sqlID, $errors)
			
			$dataGridView4.Rows.Add($row)
			
		}
		
		$dataGridView4.Sort($dataGridView4.Columns[3], 'Descending')
	}
	catch
	{
		WriteLog -Message "Error displaying failed sccm operations: $_"
	}
	
	$statusbar1.Text = "Displaying Failed SCCM operations ... Done"
}



function filterUserCollections($filterText, $filterCollections)
{
	#WriteLog -Message "Start filtering the collections - $filterText"
	
	try
	{
		$datagridviewUser.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridviewUser.ColumnCount = 4
		$datagridviewUser.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridviewUser.Columns[0].Name = "Collection Name"
		$datagridviewUser.Columns[1].Name = "Collection Comment"
		$datagridviewUser.Columns[2].Name = "Comment"
		$datagridviewUser.Columns[3].Name = "Collection ID"
		
		foreach ($entry in $filterCollections)
		{
			$collectionName = $entry.CollectionName
			#WriteLog -Message "Filtered collection: $collectionName"
		}
		
		if (![string]::IsNullOrEmpty($filterText))
		{
			#WriteLog -Message "filterText is not empty"
			$myFilteredCollection = $filterCollections | where { $_.CollectionName -like "*$filterText*" -or $_.CollectionID -like "*$filterText*" -or $_.CollectionFriendlyName -like "*$filterText*" -or $_.CollectionComment -like "*$filterText*" }
		}
		else
		{
			#WriteLog -Message "filterText is empty"
			$myFilteredCollection = $filterCollections
		}
		
		if (![string]::IsNullOrEmpty($myFilteredCollection))
		{
			foreach ($entry in $myFilteredCollection)
			{
				$row = @()
				$collectionName = $entry.CollectionName
				$collectionID = $entry.CollectionID
				$collectionFriendlyName = $entry.CollectionFriendlyName
				$collectionComment = $entry.CollectionComment
				#WriteLog -Message "Filtered result: $collectionName"
				$row = @($collectionName, $collectionFriendlyName, $collectionComment, $collectionID)
				
				$datagridviewUser.Rows.Add($row)
			}
			
			$datagridviewUser.Sort($datagridviewUser.Columns[0], 'Ascending')
		}
		else
		{
			#WriteLog -Message "Filtered user Collection is empty"
		}
	}
	catch
	{
		WriteLog -Message "Error filtering user collections: $_"
	}
	
	#WriteLog -Message "End filtering the User collections"
}

function filterDeviceCollections($filterText, $filterCollections)
{
	#WriteLog -Message "Start filtering the collections - $filterText"
	
	try
	{
		$datagridviewDevice.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridviewDevice.ColumnCount = 4
		$datagridviewDevice.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridviewDevice.Columns[0].Name = "Collection Name"
		$datagridviewDevice.Columns[1].Name = "Collection Comment"
		$datagridviewDevice.Columns[2].Name = "Comment"
		$datagridviewDevice.Columns[3].Name = "Collection ID"
		
		foreach ($entry in $filterCollections)
		{
			$collectionName = $entry.CollectionName
			#WriteLog -Message "Filtered collection: $collectionName"
		}
		
		if (![string]::IsNullOrEmpty($filterText))
		{
			#WriteLog -Message "filterText is not empty"
			$myFilteredCollection = $filterCollections | where { $_.CollectionName -like "*$filterText*" -or $_.CollectionID -like "*$filterText*" -or $_.CollectionFriendlyName -like "*$filterText*" -or $_.CollectionComment -like "*$filterText*" }
		}
		else
		{
			#WriteLog -Message "filterText is empty"
			$myFilteredCollection = $filterCollections
		}
		
		if (![string]::IsNullOrEmpty($myFilteredCollection))
		{
			foreach ($entry in $myFilteredCollection)
			{
				$row = @()
				$collectionName = $entry.CollectionName
				$collectionID = $entry.CollectionID
				$collectionFriendlyName = $entry.CollectionFriendlyName
				$collectionComment = $entry.CollectionComment
				#WriteLog -Message "Filtered result: $collectionName"
				$row = @($collectionName, $collectionFriendlyName, $collectionComment, $collectionID)
				
				$datagridviewDevice.Rows.Add($row)
			}
			
			$datagridviewDevice.Sort($datagridviewDevice.Columns[0], 'Ascending')
		}
		else
		{
			#WriteLog -Message "Filtered Device Collection is empty"
		}
	}
	catch
	{
		WriteLog -Message "Error filtering device collections: $_"
	}
	
	#WriteLog -Message "End filtering the Device collections"
}

function filterCurrentSCCMOperations($filterText, $filterOperations)
{
	#WriteLog -Message "Start filtering current SCCM operations"
	
	try
	{
		$datagridview2.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridview2.ColumnCount = 6
		$datagridview2.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridview2.Columns[0].Name = "Operation"
		$dataGridView2.Columns[1].Name = "Collection Name"
		$dataGridView2.Columns[2].Name = "User/Computer"
		$dataGridView2.Columns[3].Name = "Install Date"
		$dataGridView2.Columns[4].Name = "Added By"
		$datagridview2.Columns[5].Name = "SqlId"
		$datagridview2.Columns[5].Visible = $false
		
		if (![string]::IsNullOrEmpty($filterText))
		{
			$myFilteredCurrentOperations = $filterOperations | where { $_.Executed -eq "No" -and ($_.OperationName -like "*$filterText*" -or $_.CollectionName -like "*$filterText*" -or $_.CollectionID -like "*$filterText*" -or $_.UserSamID -like "*$filterText*" -or $_.UserUPN -like "*$filterText*" -or $_.ComputerName -like "*$filterText*") }
		}
		else
		{
			$myFilteredCurrentOperations = $filterOperations | where { $_.Executed -eq "No" }
		}
		
		foreach ($entry in $myFilteredCurrentOperations)
		{
			$row = @()
			$userOrComputerName = ""
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$computerName = $entry.ComputerName
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			
			$installDateTime = $installDate + $installTime
			if ($userName -eq "None") { $userOrComputerName = $computerName }
			elseif ($computerName -eq "None") { $userOrComputerName = $userName }
			
			$row = @($UserOperationName, $collectionName, $userOrComputerName, $installDateTime, $addedBy, $sqlID)
			$dataGridView2.Rows.Add($row)
		}
		
		$dataGridView2.Sort($dataGridView2.Columns[3], 'Descending')
	}
	catch
	{
		WriteLog -Message "Error filtering current sccm operations: $_"
	}
	
	#WriteLog -Message "End filtering current sccm operations"
}


function filterCompletedSCCMOperations($filterText, $filterOperations)
{
	#WriteLog -Message "Start filtering completed sccm operations"
	
	try
	{
		$datagridview3.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridview3.ColumnCount = 6
		$datagridview3.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridview3.Columns[0].Name = "Operation"
		$dataGridView3.Columns[1].Name = "Collection Name"
		$dataGridView3.Columns[2].Name = "User/Computer"
		$dataGridView3.Columns[3].Name = "Install Date"
		$dataGridView3.Columns[4].Name = "Added By"
		$datagridview3.Columns[5].Name = "SqlId"
		$datagridview3.Columns[5].Visible = $false
		
		if (![string]::IsNullOrEmpty($filterText))
		{
			$myFilteredCompletedOperations = $filterOperations | where { $_.Executed -eq "Yes" -and $_.Error -eq "None" -and ($_.OperationName -like "*$filterText*" -or $_.CollectionName -like "*$filterText*" -or $_.CollectionID -like "*$filterText*" -or $_.UserSamID -like "*$filterText*" -or $_.UserUPN -like "*$filterText*" -or $_.ComputerName -like "*$filterText*") }
		}
		else
		{
			$myFilteredCompletedOperations = $filterOperations | where { $_.Executed -eq "Yes" -and $_.Error -eq "None" }
		}
		
		foreach ($entry in $myFilteredCompletedOperations)
		{
			$row = @()
			$userOrComputerName = ""
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$computerName = $entry.ComputerName
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			
			$installDateTime = $installDate + $installTime
			if ($userName -eq "None") { $userOrComputerName = $computerName }
			elseif ($computerName -eq "None") { $userOrComputerName = $userName }
			
			$row = @($UserOperationName, $collectionName, $userOrComputerName, $installDateTime, $addedBy, $sqlID)
			$dataGridView3.Rows.Add($row)
		}
		
		$dataGridView3.Sort($dataGridView3.Columns[3], 'Descending')
	}
	catch
	{
		WriteLog -Message "Error filtering completed sccm operations: $_"
	}
	
	#WriteLog -Message "End filtering completed sccm operations"
}

function filterFailedSCCMOperations($filterText, $filterOperations)
{
	#WriteLog -Message "Start filtering failed sccm operations"
	
	try
	{
		$datagridview4.Rows.Clear()
		
		#Create an unbound DataGridView by declaring a column count.
		$datagridview4.ColumnCount = 7
		$datagridview4.ColumnHeadersVisible = $true
		
		#Set the column header names.
		$datagridview4.Columns[0].Name = "Operation"
		$dataGridView4.Columns[1].Name = "Collection Name"
		$dataGridView4.Columns[2].Name = "User/Computer"
		$dataGridView4.Columns[3].Name = "Install Date"
		$dataGridView4.Columns[4].Name = "Added By"
		$datagridview4.Columns[5].Name = "SqlId"
		$datagridview4.Columns[5].Visible = $false
		$dataGridView4.Columns[6].Name = "Error"
		
		if (![string]::IsNullOrEmpty($filterText))
		{
			$myFilteredFailedOperations = $filterOperations | where { $_.Executed -eq "Yes" -and $_.Error -ne "None" -and ($_.OperationName -like "*$filterText*" -or $_.CollectionName -like "*$filterText*" -or $_.CollectionID -like "*$filterText*" -or $_.UserSamID -like "*$filterText*" -or $_.UserUPN -like "*$filterText*" -or $_.ComputerName -like "*$filterText*") }
		}
		else
		{
			$myFilteredFailedOperations = $filterOperations | where { $_.Executed -eq "Yes" -and $_.Error -ne "None" }
		}
		
		foreach ($entry in $myFilteredFailedOperations)
		{
			$row = @()
			$userOrComputerName = ""
			
			$UserOperationName = $entry.OperationName
			$collectionName = $entry.CollectionName
			$userName = $entry.UserSamID
			$computerName = $entry.ComputerName
			$installDate = $entry.DeploymentDate
			$installTime = $entry.DeploymentTime
			$addedBy = $entry.addedBy
			$sqlID = $entry.Id
			$errors = $entry.Error
			
			$installDateTime = $installDate + $installTime
			if ($userName -eq "None") { $userOrComputerName = $computerName }
			elseif ($computerName -eq "None") { $userOrComputerName = $userName }
			
			$row = @($UserOperationName, $collectionName, $userOrComputerName, $installDateTime, $addedBy, $sqlID, $errors)
			$dataGridView4.Rows.Add($row)
		}
		
		$dataGridView4.Sort($dataGridView4.Columns[3], 'Descending')
	}
	catch
	{
		WriteLog -Message "Error filtering failed sccm operations: $_"
	}
	
	#WriteLog -Message "End filtering failed sccm operations"
}


function displayUserSCCMCollections($mySCCMUser, $mySamID)
{
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$statusbar1.Text = "Displaying User SCCM collections ... "
	
	$mySCCMUser = $mySCCMUser.Trim()
	WriteLog -Message "Displaying user collections for: $mySCCMUser - $mySamID"
	$datagridUserSoftware.Rows.Clear()
	
	#Create an unbound DataGridView by declaring a column count.
	$datagridUserSoftware.ColumnCount = 1
	$datagridUserSoftware.ColumnHeadersVisible = $true
	
	#Set the column header names.
	$datagridUserSoftware.Columns[0].Name = "Software"
	
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Visible = $true
	$progressbaroverlay1.Increment(1)
	
	$mySCCMUser = $mySCCMUser.Replace("\", "\\")
	WriteLog -Message "mySCCMUser: $mySCCMUser"
	
	try
	{
		$ids = (Get-WmiObject -ComputerName $SCCMServer -Namespace "root\sms\$SCCMSiteID" -Class SMS_FullCollectionMembership -filter "SMSID=`"$mySCCMUser`"").collectionID
		
		$i = 0
		$j = 0
		foreach ($id in $ids)
		{
			$i++
		}
		
		$progressbaroverlay1.Maximum = $i
		
		if ($i -gt 0)
		{
			foreach ($id in $ids)
			{
				$Collection = get-WMIObject -ComputerName $SCCMServer -namespace "root\sms\$SCCMSiteID" -class sms_collection -Filter "collectionid=`"$($id)`""
				$row = @()
				$collectionName = $Collection.Name
				
				if ($collectionName -like "*$SCCMUserCollectionFilter*")
				{
					$row = @($collectionName)
					$datagridUserSoftware.Rows.Add($row)
					$j++
				}
				
				$progressbaroverlay1.Increment(1)
			}
			
			if ($j -eq 0)
			{
				$datagridUserSoftware.Rows.Add("No software found")
			}
			else
			{
				$datagridUserSoftware.Sort($datagridUserSoftware.Columns[0], 'Ascending')
			}
		}
		else
		{
			WriteLog -Message "No software found for this user"
			$datagridUserSoftware.Rows.Add("No software found")
		}
		
		
	}
	catch
	{
		WriteLog -Message "Error getting user collections from SCCM: $_"	
	}
	
	$progressbaroverlay1.Visible = $false
	$statusbar1.Text = "Displaying User SCCM collections ... Done"
	
	$progressbaroverlay1.Visible = $false
	$tabcontrol1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}

function displayDeviceSCCMCollections($myComputer)
{
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$statusbar1.Text = "Displaying Device SCCM collections ... "
	$myComputer = $myComputer.Trim()
	WriteLog -Message "Displaying user collections for: $myComputer"
	$datagridDeviceSoftware.Rows.Clear()
	
	#Create an unbound DataGridView by declaring a column count.
	$datagridDeviceSoftware.ColumnCount = 1
	$datagridDeviceSoftware.ColumnHeadersVisible = $true
	
	#Set the column header names.
	$datagridDeviceSoftware.Columns[0].Name = "Software"
	
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Visible = $true
	$progressbaroverlay1.Increment(1)
	
	try
	{
		$statusbar1.Text = "Searching computer in SCCM ... "
		$computerSCCMResourceID = (Get-WMIObject -ComputerName $SCCMServer -Namespace "root\sms\$SCCMSiteID" -Class SMS_R_System | Where-Object { $_.Name -eq $myComputer } | Select-Object ResourceID).ResourceID
		WriteLog -Message "computerSCCMResourceID: $computerSCCMResourceID"
	}
	catch
	{
		WriteLog -Message "Error finding computer in SCCM: $_"
		$computerSCCMResourceID = ""
	}
	
	$noResourceID = $computerSCCMResourceID.Length
	if ($noResourceID -gt 1)
	{
		$tabcontrol1.Visible = $false
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Computer not found"
		$Messageboxbody = "Computer $myComputer found $noResourceID times in SCCM. Please delete it from SCCM before deploying anything."
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
	else
	{
		try
		{
			if (![string]::IsNullOrEmpty($computerSCCMResourceID))
			{
				$statusbar1.Text = "Searching collections in SCCM ... "
				$Collections = Get-WmiObject -ComputerName $SCCMServer -Namespace "root\sms\$SCCMSiteID" -Query "SELECT SMS_Collection.* FROM SMS_FullCollectionMembership, SMS_Collection WHERE name = '$myComputer' and SMS_FullCollectionMembership.CollectionID = SMS_Collection.CollectionID"
				#WriteLog -Message "Collections: $Collections"
				
				$i = 0
				$j = 0
				foreach ($id in $Collections)
				{
					$i++
				}
				
				$progressbaroverlay1.Maximum = $i
				
				if ($i -gt 0)
				{
					foreach ($id in $Collections)
					{
						#WriteLog -Message "Checking collection id: $($id.CollectionID)"
						$Collection = get-WMIObject -ComputerName $SCCMServer-namespace "root\sms\$SCCMSiteID" -class sms_collection -Filter "collectionid=`"$($id.CollectionID)`""
						$row = @()
						$collectionName = $Collection.Name
						#WriteLog -Message "collectionName: $collectionName"
						if ($collectionName -like "*$SCCMDeviceCollectionFilter*")
						{
							#WriteLog -Message "Found collection: $collectionName"
							$row = @($collectionName)
							$datagridDeviceSoftware.Rows.Add($row)
							$j++
						}
						
						$progressbaroverlay1.Increment(1)
						#WriteLog -Message ""
					}
					
					if ($j -eq 0)
					{
						$datagridDeviceSoftware.Rows.Add("No software found")
					}
					else
					{
						$datagridDeviceSoftware.Sort($datagridDeviceSoftware.Columns[0], 'Ascending')
					}
				}
				else
				{
					WriteLog -Message "No software found for this device"
					$datagridDeviceSoftware.Rows.Add("No software found")
				}
			}
			else
			{
				$tabcontrol1.Visible = $false
				$loadingMessage1.Visible = $false
				$loadingMessage2.Visible = $false
				$loadingMessage1.Update()
				$loadingMessage2.Update()
				
				$ButtonType = [System.Windows.MessageBoxButton]::OK
				$MessageboxTitle = "Computer not found"
				$Messageboxbody = "Computer $myComputer was not found in SCCM"
				$MessageIcon = [System.Windows.MessageBoxImage]::Warning
				[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
			}
		}
		catch
		{
			WriteLog -Message "Error finding device collections in SCCM: $_"
		}
	}
	
	$progressbaroverlay1.Visible = $false
	$statusbar1.Text = "Displaying Device SCCM collections ... Done"
	
	$progressbaroverlay1.Visible = $false
	$tabcontrol1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}


function GetActualUserEmail
{
	$statusbar1.Text = "Get actual user email ... "
	$actualUser = $env:username
	WriteLog -Message "actualUser: $actualUser"
	if (![string]::IsNullOrEmpty($actualUser))
	{
		try
		{
			$myUser = Get-ADUser -Filter { SamAccountName -eq $actualUser } -Server $ADDomain -Properties EmailAddress -ErrorAction Stop
			$myUserEmail = $myUser.EmailAddress
			
			if (![string]::IsNullOrEmpty($myUserEmail))
			{
				WriteLog -Message "user email found: $myUserEmail"
				$EmailAddressUserTxt.Text = $myUserEmail
				$EmailAddressUserTxt.ReadOnly = $true
				
				$EmailAddressDeviceTxt.Text = $myUserEmail
				$EmailAddressDeviceTxt.ReadOnly = $true
			}
			else
			{
				WriteLog -Message "user email NOT found"
				$EmailAddressUserTxt.Text = ""
				$EmailAddressUserTxt.ReadOnly = $false
				
				$EmailAddressDeviceTxt.Text = ""
				$EmailAddressDeviceTxt.ReadOnly = $false
			}
		}
		catch
		{
			WriteLog -Message "Error checking AD for email: $_"
			$myUserEmail = ""
			$EmailAddressUserTxt.Text = ""
			$EmailAddressUserTxt.ReadOnly = $false
			
			$EmailAddressDeviceTxt.Text = ""
			$EmailAddressDeviceTxt.ReadOnly = $false
		}
	}
	else
	{
		WriteLog -Message "Actual user is empty"
	}
	
	$statusbar1.Text = "Get actual user email ... Done"
}






$tabcontrol1_SelectedIndexChanged = {
	$tabIndex = $tabcontrol1.SelectedIndex
}


$formWASH31_Activated = {
	#WriteLog -Message "Form visible"
	#$buttonImportList.Visible = $false
	$buttonImportListUsers.Visible = $true
	#$progressbaroverlay1.Visible = $true
	#$tabcontrol1.Visible = $false
}

$formWASH31_Shown = {
	#WriteLog -Message "Form shown"
	$allowed = $false
	$actualUser = $env:username
	
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$statusbar1.Text = "Checking if user is allowed to use this app"
	$progressbaroverlay1.Step = 1
	
	try
	{
		WriteLog -Message "Checking if user is allowed to use this app ..."
		try
		{
			$ADGroupMembers = Get-ADGroupMember -server $ADDomain -Identity $ADGroup
			foreach ($user in $ADGroupMembers)
			{
				$myUser = $user.SamAccountName
				#WriteLog -Message "Allowed User: $myUser"
				
				if ($myUser.Trim().ToLower() -eq $actualUser.Trim().ToLower())
				{
					WriteLog -Message "User $myUser is allowed"
					$allowed = $true
					
					$statusbar1.Text = "User $myUser is allowed"
					$progressbaroverlay1.Step = 2
				}
			}
		}
		catch
		{
			WriteLog -Message "Error getting members from AD group: $_"
		}
	}
	catch
	{
		WriteLog -Message "Error retrieving AD group users: $_"
		$formWASH31.Close()
	}
	
	if ($allowed)
	{
		$statusbar1.Text = "Downloading data ..."
		$progressbaroverlay1.Step = 3
		
		GetActualUserEmail
		
		$global:myReturnedUserCollections = getUserCollections
		
		$global:myReturnedDeviceCollections = getDeviceCollections
		
		displayUserCollections $global:myReturnedUserCollections
		
		displayDeviceCollections $global:myReturnedDeviceCollections
		
		$global:myReturnedUserTempOperations = getUserTempOperations
		displayUserTempOperations $global:myReturnedUserTempOperations
		
		$global:myReturnedDeviceTempOperations = getDeviceTempOperations
		displayDeviceTempOperations $global:myReturnedDeviceTempOperations
		
		$global:myReturnedOperations = getOperationsLastMonth
		displaySCCMCurrent $global:myReturnedOperations
		displaySCCMCompleted $global:myReturnedOperations
		displaySCCMFailed $global:myReturnedOperations
		
		$statusbar1.Text = "Done"
		
		$progressbaroverlay1.Visible = $false
		$tabcontrol1.Visible = $true
		$loadingMessage2.Visible = $false
		$loadingMessage1.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
	}
	else
	{
		$tabcontrol1.Visible = $false
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "User denied"
		$Messageboxbody = "You are not allowed to use this application."
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		
		$formWASH31.Close()
	}
}




$SamIDtxt_TextChanged = {
	#WriteLog -Message "text changed in samID"
	$myUserSamID = $SamIDtxt.Text
	$myUserDomain = $DomainDropbox.Text
	#$datagridUserSoftware.Rows.Clear()
	
	if ([string]::IsNullOrEmpty($myUserSamID))
	{
		$buttonCheckUserCollections.Visible = $true
		$datagridUserSoftware.Rows.Clear()
	}
	elseif ($myUserSamID -eq "file")
	{
		$buttonCheckUserCollections.Visible = $false
		$datagridUserSoftware.Rows.Clear()
	}
	else
	{
		$buttonCheckUserCollections.Visible = $true
		$datagridUserSoftware.Rows.Clear()
	}
	
}

$DomainDropbox_SelectedIndexChanged = {
	#WriteLog -Message "selection changed in domain"
	$myUserSamID = $SamIDtxt.Text
	$myUserDomain = $DomainDropbox.Text
	#$datagridUserSoftware.Rows.Clear()
	
}

$buttonCheckUserCollections_Click = {
	$myUserSamID = $SamIDtxt.Text
	$myUserDomain = $DomainDropbox.Text
	$datagridUserSoftware.Rows.Clear()
	$checkUserUPN = ""
	$checkUserEmail = ""	
	
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Visible = $true
	$progressbaroverlay1.Increment(1)
	
	if (![string]::IsNullOrEmpty($myUserSamID) -and ![string]::IsNullOrEmpty($myUserDomain))
	{
		
		$myUSerID = "$myUserDomain\$myUserSamID"
		$myUserLenght = $myUserSamID.Length
		
		try
		{
			$progressbaroverlay1.Increment(1)
			$statusbar1.Text = "Checking user in AD ..."
		
			$checkUserDetails = Get-ADUser -Filter { SamAccountName -eq $myUserSamID } -Server $ADDomain -Properties UserPrincipalName, EmailAddress -ErrorAction Stop
			$checkUserUPN = $checkUserDetails.UserPrincipalName
			$checkUserEmail = $checkUserDetails.EmailAddress
			$progressbaroverlay1.Increment(1)
		}
		catch
		{
			WriteLog -Message "Error checking user in AD: $_"
			$checkUserUPN = ""
			$checkUserEmail = ""
		}
		$statusbar1.Text = "Checking user in AD ... Done"
		WriteLog -Message "checkUserUPN: $checkUserUPN"
		WriteLog -Message "checkUserEmail: $checkUserEmail"
		
		if (![string]::IsNullOrEmpty($checkUserUPN))
		{
			$progressbaroverlay1.Increment(1)
			WriteLog -Message "Searching collections for: $myUSerID"
			
			displayUserSCCMCollections $myUSerID $myUserSamID
		}
		else
		{
			$checkUserUPN = "Unknown"
		
			$progressbaroverlay1.Visible = $false
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "User unknown"
			$Messageboxbody = "Please check the user SamID and Domain. This user doesn't exists in AD."
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
	}
	else
	{
		$progressbaroverlay1.Visible = $false
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "User unknown"
		$Messageboxbody = "SamID and Domain are mandatory fields"
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
	
	$labelUserIsPartOf.Text = "User $checkUserUPN is part of the following SCCM collections"
}


$buttonCheckDeviceCollections_Click = {
	$myComputerName = $ComputerNametxt.Text
	$datagridUserSoftware.Rows.Clear()
		
	$progressbaroverlay1.Step = 1
	$progressbaroverlay1.Value = 0
	$progressbaroverlay1.Visible = $true
	$progressbaroverlay1.Increment(1)
	
	if (![string]::IsNullOrEmpty($myComputerName))
	{
		$progressbaroverlay1.Increment(1)
		WriteLog -Message "Searching collections for: $myComputerName"
		
		displayDeviceSCCMCollections $myComputerName
	}
	else
	{
		$progressbaroverlay1.Visible = $false
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Computer unknown"
		$Messageboxbody = "ComputerName is a mandatory field"
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
	
	$labelDeviceIsPartOf.Text = "Device $myComputerName is part of the following SCCM collections"
}


$buttonAddToUserTemporaryQueue_Click = {
	
	$tabcontrol1.Visible = $false
	$loadingMessage2.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	if ($global:importUserButtonUsed -eq "yes")
	{
		if ([string]::IsNullOrEmpty($global:myUsers))
		{
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Empty file"
			$Messageboxbody = "No entry detected in the file"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
			
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
		}
		else
		{
			$myUserCollection = $global:myUsers
			$allUsersOk = "yes"			
			$messageCount = 0
			$popupDeclined = "no"
			
			$tabcontrol1.Visible = $false
			$loadingMessage2.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			foreach ($item in $myUserCollection) {
				$myUserSamID = $item.SamID
				$myUserDomain = $item.Domain
				$mySendEmailToUser = $checkboxSendEmailToUser.CheckState
				$myNotificationEmail = $EmailAddressUserTxt.Text
				$myDeploymentDateTime = $UserDeploymentDatePicker.Text
				$myDeploymentType = $UserOperationName.Text
				
				if ($mySendEmailToUser -eq "Checked") { $mySendEmailToUser = "Yes" }
				else { $mySendEmailToUser = "No" }
				WriteLog -Message "mySendEmailToUser: $mySendEmailToUser"
				
				if ($myUserSamID.ToLower() -notlike "cg20*")
				{
					$myDeploymentDate = [datetime]::ParseExact($myDeploymentDateTime, "MMMM d, yyyy", $null).ToString("MM/dd/yyyy")
					$myDeploymentTime = "00:00:00"
					WriteLog -Message "myDeploymentDate: $myDeploymentDate"
					WriteLog -Message "myDeploymentTime: $myDeploymentTime"
					
					if ([string]::IsNullOrEmpty($myUserSamID))
					{
						$ButtonType = [System.Windows.MessageBoxButton]::OK
						$MessageboxTitle = "Field missing"
						$Messageboxbody = "The SamID field needs to have a value"
						$MessageIcon = [System.Windows.MessageBoxImage]::Warning
						[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
						
						$allUsersOk = "no"
						
						$tabcontrol1.Visible = $true
						$loadingMessage1.Visible = $false
						$loadingMessage2.Visible = $false
						$loadingMessage1.Update()
						$loadingMessage2.Update()
						
						break
					}
					elseif ([string]::IsNullOrEmpty($myUserDomain))
					{
						$ButtonType = [System.Windows.MessageBoxButton]::OK
						$MessageboxTitle = "Field missing"
						$Messageboxbody = "The Domain field needs to have a value"
						$MessageIcon = [System.Windows.MessageBoxImage]::Warning
						[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
						
						$allUsersOk = "no"
						
						$tabcontrol1.Visible = $true
						$loadingMessage1.Visible = $false
						$loadingMessage2.Visible = $false
						$loadingMessage1.Update()
						$loadingMessage2.Update()
						
						break
					}
					elseif ([string]::IsNullOrEmpty($myNotificationEmail))
					{
						$ButtonType = [System.Windows.MessageBoxButton]::OK
						$MessageboxTitle = "Field missing"
						$Messageboxbody = "The Notification Email field needs to have a value"
						$MessageIcon = [System.Windows.MessageBoxImage]::Warning
						[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
						
						$allUsersOk = "no"
						
						$tabcontrol1.Visible = $true
						$loadingMessage1.Visible = $false
						$loadingMessage2.Visible = $false
						$loadingMessage1.Update()
						$loadingMessage2.Update()
						
						break
					}
					elseif ([string]::IsNullOrEmpty($myDeploymentType))
					{
						$ButtonType = [System.Windows.MessageBoxButton]::OK
						$MessageboxTitle = "Field missing"
						$Messageboxbody = "The Add/Remove field needs to have a value"
						$MessageIcon = [System.Windows.MessageBoxImage]::Warning
						[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
						
						$allUsersOk = "no"
						
						$tabcontrol1.Visible = $true
						$loadingMessage1.Visible = $false
						$loadingMessage2.Visible = $false
						$loadingMessage1.Update()
						$loadingMessage2.Update()
						
						break
					}
					else
					{
						if ($myDeploymentType -eq "Add") { $myDeploymentType = "AddUser" }
						if ($myDeploymentType -eq "Remove") { $myDeploymentType = "RemoveUser" }
						
						try
						{
							$checkUserDetails = Get-ADUser -Filter { SamAccountName -eq $myUserSamID } -Server $ADDomain -Properties UserPrincipalName, EmailAddress -ErrorAction Stop
							$checkUserUPN = $checkUserDetails.UserPrincipalName
							$checkUserEmail = $checkUserDetails.EmailAddress
							
						}
						catch
						{
							WriteLog -Message "Error checking user in ad 2: $_"
							$checkUserUPN = ""
							$checkUserEmail = ""
						}
						WriteLog -Message "checkUserUPN: $checkUserUPN"
						WriteLog -Message "checkUserEmail: $checkUserEmail"
						
						if (![string]::IsNullOrEmpty($checkUserUPN))
						{							
							if ($mySendEmailToUser -eq "Yes" -and [string]::IsNullOrEmpty($checkUserEmail))
							{
								$tabcontrol1.Visible = $true
								$loadingMessage1.Visible = $false
								$loadingMessage2.Visible = $false
								$loadingMessage1.Update()
								$loadingMessage2.Update()
								
								$ButtonType = [System.Windows.MessageBoxButton]::OK
								$MessageboxTitle = "Email unknown"
								$Messageboxbody = "This user ($checkUserUPN) exists in AD but doesn't have an email address. Please uncheck the option to send an email to user for this deployment."
								$MessageIcon = [System.Windows.MessageBoxImage]::Warning
								[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
								
								$allUsersOk = "no"
								
								$tabcontrol1.Visible = $true
								$loadingMessage1.Visible = $false
								$loadingMessage2.Visible = $false
								$loadingMessage1.Update()
								$loadingMessage2.Update()
								
								break
							}
							else
							{
								$adddedBy = $env:username
								#$myDeploymentDate = [datetime]::ParseExact($myDeploymentDate, "MMMM d, yyyy", $null).ToString("MM/dd/yyyy")
								$myUSerID = "$myUserDomain\$myUserSamID"
								WriteLog -Message "myUserSamID: $myUserSamID"
								WriteLog -Message "myUSerID: $myUSerID"
								WriteLog -Message "myUserDomain: $myUserDomain"
								WriteLog -Message "mySendEmailToUser: $mySendEmailToUser"
								WriteLog -Message "myNotificationEmail: $myNotificationEmail"
								WriteLog -Message "myDeploymentDate: $myDeploymentDate"
								WriteLog -Message "myDeploymentTime: $myDeploymentTime"
								WriteLog -Message "myDeploymentType: $myDeploymentType"
								
								#$myUserSCCMCollections = getSCCMCollections $myUSerID
								
								if (IsValidEmail $myNotificationEmail)
								{
									for ($j = 0; $j -le $datagridviewUser.RowCount - 1; $j++)
									{
										if ($datagridviewUser.Rows[$j].Selected -eq "True")
										{
											$selectedCollectionName = $datagridviewUser.Rows[$j].Cells[0].Value
											$selectedCollectionBundle = $datagridviewUser.Rows[$j].Cells[1].Value
											$selectedCollectionComment = $datagridviewUser.Rows[$j].Cells[2].Value
											$selectedCollectionID = $datagridviewUser.Rows[$j].Cells[3].Value
											
											WriteLog -Message "selectedCollectionName: $selectedCollectionName"
											WriteLog -Message "selectedCollectionSCCMComment: $selectedCollectionBundle"
											WriteLog -Message "selectedCollectionComment: $selectedCollectionComment"
											WriteLog -Message "selectedCollectionID: $selectedCollectionID"
																						
											insertUserDB $myDeploymentType $selectedCollectionName $selectedCollectionID $myUSerID $myNotificationEmail $myDeploymentDate $myDeploymentTime $adddedBy $checkUserUPN $checkUserEmail $mySendEmailToUser
										}
									}
									
								}
								else
								{
									$ButtonType = [System.Windows.MessageBoxButton]::OK
									$MessageboxTitle = "Email unknown"
									$Messageboxbody = "Please check the notification email. Doesn't look like a valid email address."
									$MessageIcon = [System.Windows.MessageBoxImage]::Warning
									[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
									
									$allUsersOk = "no"
									
									$tabcontrol1.Visible = $true
									$loadingMessage1.Visible = $false
									$loadingMessage2.Visible = $false
									$loadingMessage1.Update()
									$loadingMessage2.Update()
									
									break
								}
							}
						}
						else
						{  
							$ButtonType = [System.Windows.MessageBoxButton]::OK
							$MessageboxTitle = "AD User unknown"
							$Messageboxbody = "Please check the user's SamID and domain. Can't find this user ($myUserSamID) in AD ($ADDomain)."
							$MessageIcon = [System.Windows.MessageBoxImage]::Warning
							[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
							
							$allUsersOk = "no"
							
							$tabcontrol1.Visible = $true
							$loadingMessage1.Visible = $false
							$loadingMessage2.Visible = $false
							$loadingMessage1.Update()
							$loadingMessage2.Update()
							
							break
						}
					}
				}
				else
				{
					WriteLog -Message "Disabled user detected - $myUserSamID .... skipping it"
				}
			}
			
			if ($allUsersOk -eq "yes")
			{
				$global:importUserButtonUsed = "no"
				$global:myUsers = $null
				$SamIDtxt.Text = ""
			}
			
			$global:myReturnedUserTempOperations = getUserTempOperations
			displayUserTempOperations $global:myReturnedUserTempOperations
		}
		
	}
	else
	{
		$tabcontrol1.Visible = $false
		$loadingMessage2.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$myUserSamID = $SamIDtxt.Text
		$myUserDomain = $DomainDropbox.Text
		$mySendEmailToUser = $checkboxSendEmailToUser.CheckState
		$myNotificationEmail = $EmailAddressUserTxt.Text
		$myDeploymentDateTime = $UserDeploymentDatePicker.Text
		#$myDeploymentDate = $deploymentDatePicker.Text
		#$myDeploymentTime = $deploymentTimePicker.Text
		$myDeploymentType = $UserOperationName.Text
		
		if ($mySendEmailToUser -eq "Checked") { $mySendEmailToUser = "Yes" }
		else{ $mySendEmailToUser = "No" }
		WriteLog -Message "mySendEmailToUser: $mySendEmailToUser"
				
		$myDeploymentDate = [datetime]::ParseExact($myDeploymentDateTime, "MMMM d, yyyy", $null).ToString("MM/dd/yyyy")
		$myDeploymentTime = "00:00:00"
		WriteLog -Message "myDeploymentDate: $myDeploymentDate"
		WriteLog -Message "myDeploymentTime: $myDeploymentTime"
		
		if ([string]::IsNullOrEmpty($myUserSamID))
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "The SamID field needs to have a value"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ($myUserSamID.ToLower() -like "cg20*")
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "This SamID ($myUserSamID) seems to be a disabled user ... please check again"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ([string]::IsNullOrEmpty($myUserDomain))
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "The Domain field needs to have a value"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ($myUserSamID -eq "file")
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Wrong SamID"
			$Messageboxbody = "Please delete 'file' word from SamID field"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ([string]::IsNullOrEmpty($myNotificationEmail))
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "The Notification Email field needs to have a value"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ([string]::IsNullOrEmpty($myDeploymentType))
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "The Add/Remove field needs to have a value"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		else
		{
			if ($myDeploymentType -eq "Add") { $myDeploymentType = "AddUser" }
			if ($myDeploymentType -eq "Remove") { $myDeploymentType = "RemoveUser" }
			
			try
			{
				$checkUserDetails = Get-ADUser -Filter { SamAccountName -eq $myUserSamID } -Server $ADDomain -Properties UserPrincipalName, EmailAddress -ErrorAction Stop
				$checkUserUPN = $checkUserDetails.UserPrincipalName
				$checkUserEmail = $checkUserDetails.EmailAddress
				
			}
			catch
			{
				WriteLog -Message "error checking user in ad 3: $_"
				$checkUserUPN = ""
				$checkUserEmail = ""
			}
			WriteLog -Message "checkUserUPN: $checkUserUPN"
			WriteLog -Message "checkUserEmail: $checkUserEmail"
			
			if (![string]::IsNullOrEmpty($checkUserUPN))
			{
				if ($mySendEmailToUser -eq "Yes" -and [string]::IsNullOrEmpty($checkUserEmail))
				{
					$tabcontrol1.Visible = $true
					$loadingMessage1.Visible = $false
					$loadingMessage2.Visible = $false
					$loadingMessage1.Update()
					$loadingMessage2.Update()
					
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageboxTitle = "Email unknown"
					$Messageboxbody = "This user ($checkUserUPN) exists in AD but doesn't have an email address. Please uncheck the option to send an email to user for this deployment."
					$MessageIcon = [System.Windows.MessageBoxImage]::Warning
					[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
				}
				else
				{
					$adddedBy = $env:username
					#$myDeploymentDate = [datetime]::ParseExact($myDeploymentDate, "MMMM d, yyyy", $null).ToString("MM/dd/yyyy")
					$myUSerID = "$myUserDomain\$myUserSamID"
					WriteLog -Message "myUserSamID: $myUserSamID"
					WriteLog -Message "myUSerID: $myUSerID"
					WriteLog -Message "myUserDomain: $myUserDomain"
					WriteLog -Message "mySendEmailToUser: $mySendEmailToUser"
					WriteLog -Message "myNotificationEmail: $myNotificationEmail"
					WriteLog -Message "myDeploymentDate: $myDeploymentDate"
					WriteLog -Message "myDeploymentTime: $myDeploymentTime"
					WriteLog -Message "myDeploymentType: $myDeploymentType"
					
					#$myUserSCCMCollections = getSCCMCollections $myUSerID
					
					if (IsValidEmail $myNotificationEmail)
					{
						for ($j = 0; $j -le $datagridviewUser.RowCount - 1; $j++)
						{
							if ($datagridviewUser.Rows[$j].Selected -eq "True")
							{
								$selectedCollectionName = $datagridviewUser.Rows[$j].Cells[0].Value
								$selectedCollectionBundle = $datagridviewUser.Rows[$j].Cells[1].Value
								$selectedCollectionComment = $datagridviewUser.Rows[$j].Cells[2].Value
								$selectedCollectionID = $datagridviewUser.Rows[$j].Cells[3].Value
								
								WriteLog -Message "selectedCollectionName: $selectedCollectionName"
								WriteLog -Message "selectedCollectionSCCMComment: $selectedCollectionBundle"
								WriteLog -Message "selectedCollectionComment: $selectedCollectionComment"
								WriteLog -Message "selectedCollectionID: $selectedCollectionID"
								
								insertUserDB $myDeploymentType $selectedCollectionName $selectedCollectionID $myUSerID $myNotificationEmail $myDeploymentDate $myDeploymentTime $adddedBy $checkUserUPN $checkUserEmail $mySendEmailToUser
								
								$global:myReturnedUserTempOperations = getUserTempOperations
								displayUserTempOperations $global:myReturnedUserTempOperations
							}
						}
						
						
					}
					else
					{
						$tabcontrol1.Visible = $true
						$loadingMessage1.Visible = $false
						$loadingMessage2.Visible = $false
						$loadingMessage1.Update()
						$loadingMessage2.Update()
						
						$ButtonType = [System.Windows.MessageBoxButton]::OK
						$MessageboxTitle = "Email unknown"
						$Messageboxbody = "Please check the notification email. Doesn't look like a valid email address."
						$MessageIcon = [System.Windows.MessageBoxImage]::Warning
						[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
					}
				}
				
			}
			else
			{
				$tabcontrol1.Visible = $true
				$loadingMessage1.Visible = $false
				$loadingMessage2.Visible = $false
				$loadingMessage1.Update()
				$loadingMessage2.Update()
				
				$ButtonType = [System.Windows.MessageBoxButton]::OK
				$MessageboxTitle = "AD User unknown"
				$Messageboxbody = "Please check the user's SamID and domain. Can't find this user in AD."
				$MessageIcon = [System.Windows.MessageBoxImage]::Warning
				[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
			}
		}
	}
	
	$tabcontrol1.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}


$buttonAddToDeviceTemporaryQueue_Click = {
	
	$tabcontrol1.Visible = $false
	$loadingMessage2.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	if ($global:importDeviceButtonUsed -eq "yes")
	{
		if ([string]::IsNullOrEmpty($global:myDevices))
		{
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Empty file"
			$Messageboxbody = "No entry detected in the file"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
			
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
		}
		else
		{
			$myDeviceCollection = $global:myDevices
			$allDevicesOk = "yes"
			$messageCount = 0
			$popupDeclined = "no"
			
			$tabcontrol1.Visible = $false
			$loadingMessage2.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			foreach ($item in $myDeviceCollection)
			{
				$myDeviceName = $item.ComputerName				
				$myNotificationEmail = $EmailAddressDeviceTxt.Text
				$myDeploymentDateTime = $DeviceDeploymentDatePicker.Text
				$myDeploymentType = $DeviceOperationName.Text
				WriteLog -Message "myDeploymentDateTime: $myDeploymentDateTime"
				
				$myDeploymentDate = [datetime]::ParseExact($myDeploymentDateTime, "MMMM d, yyyy", $null).ToString("MM/dd/yyyy")
				$myDeploymentTime = "00:00:00"
				WriteLog -Message "myDeploymentDate: $myDeploymentDate"
				WriteLog -Message "myDeploymentTime: $myDeploymentTime"
				
				if ([string]::IsNullOrEmpty($myDeviceName))
				{
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageboxTitle = "Field missing"
					$Messageboxbody = "The ComputerName field needs to have a value"
					$MessageIcon = [System.Windows.MessageBoxImage]::Warning
					[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
				
					$allDevicesOk = "no"
					
					$tabcontrol1.Visible = $true
					$loadingMessage1.Visible = $false
					$loadingMessage2.Visible = $false
					$loadingMessage1.Update()
					$loadingMessage2.Update()
					
					break
				}
				elseif ([string]::IsNullOrEmpty($myNotificationEmail))
				{
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageboxTitle = "Field missing"
					$Messageboxbody = "The Notification Email field needs to have a value"
					$MessageIcon = [System.Windows.MessageBoxImage]::Warning
					[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
				
					$allDevicesOk = "no"
					
					$tabcontrol1.Visible = $true
					$loadingMessage1.Visible = $false
					$loadingMessage2.Visible = $false
					$loadingMessage1.Update()
					$loadingMessage2.Update()
					
					break
				}
				elseif ([string]::IsNullOrEmpty($myDeploymentType))
				{
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageboxTitle = "Field missing"
					$Messageboxbody = "The Add/Remove field needs to have a value"
					$MessageIcon = [System.Windows.MessageBoxImage]::Warning
					[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
				
					$allDevicesOk = "no"
					
					$tabcontrol1.Visible = $true
					$loadingMessage1.Visible = $false
					$loadingMessage2.Visible = $false
					$loadingMessage1.Update()
					$loadingMessage2.Update()
					
					break
				}
				else
				{
					if ($myDeploymentType -eq "Add") { $myDeploymentType = "AddDevice" }
					if ($myDeploymentType -eq "Remove") { $myDeploymentType = "RemoveDevice" }
					
						$adddedBy = $env:username
						#$myDeploymentDate = [datetime]::ParseExact($myDeploymentDate, "MMMM d, yyyy", $null).ToString("MM/dd/yyyy")
				
						WriteLog -Message "myDeviceName: $myDeviceName"
						WriteLog -Message "myNotificationEmail: $myNotificationEmail"
						WriteLog -Message "myDeploymentDate: $myDeploymentDate"
						WriteLog -Message "myDeploymentTime: $myDeploymentTime"
						WriteLog -Message "myDeploymentType: $myDeploymentType"
													
						if (IsValidEmail $myNotificationEmail)
						{
							for ($j = 0; $j -le $datagridviewDevice.RowCount - 1; $j++)
							{
								if ($datagridviewDevice.Rows[$j].Selected -eq "True")
								{
									$selectedCollectionName = $datagridviewDevice.Rows[$j].Cells[0].Value
									$selectedCollectionBundle = $datagridviewDevice.Rows[$j].Cells[1].Value
									#$selectedCollectionComment = $datagridviewDevice.Rows[$j].Cells[2].Value
									$selectedCollectionID = $datagridviewDevice.Rows[$j].Cells[2].Value
									
									WriteLog -Message "selectedCollectionName: $selectedCollectionName"
									WriteLog -Message "selectedCollectionSCCMComment: $selectedCollectionBundle"
									#WriteLog -Message "selectedCollectionComment: $selectedCollectionComment"
									WriteLog -Message "selectedCollectionID: $selectedCollectionID"
							
									insertDeviceDB $myDeploymentType $selectedCollectionName $selectedCollectionID $myDeviceName $myNotificationEmail $myDeploymentDate $myDeploymentTime $adddedBy
								}
							}
							
						}
						else
						{
							$ButtonType = [System.Windows.MessageBoxButton]::OK
							$MessageboxTitle = "Email unknown"
							$Messageboxbody = "Please check the notification email. Doesn't look like a valid email address."
							$MessageIcon = [System.Windows.MessageBoxImage]::Warning
							[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
					
							$allDevicesOk = "no"
							
							$tabcontrol1.Visible = $true
							$loadingMessage1.Visible = $false
							$loadingMessage2.Visible = $false
							$loadingMessage1.Update()
							$loadingMessage2.Update()
							
							break
						}
					
				}
			}
			
			if ($allDevicesOk -eq "yes")
			{
				$global:importDeviceButtonUsed = "no"
				$global:myDevices = $null
				$ComputerNametxt.Text = ""
			}
			
			$global:myReturnedDeviceTempOperations = getDeviceTempOperations
			displayDeviceTempOperations $global:myReturnedDeviceTempOperations
		}
		
	}
	else
	{
		$tabcontrol1.Visible = $false
		$loadingMessage2.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$computerName = $ComputerNametxt.Text
		$myNotificationEmail = $EmailAddressDeviceTxt.Text
		$myDeploymentDateTime = $DeviceDeploymentDatePicker.Text		
		$myDeploymentType = $DeviceOperationName.Text
		WriteLog -Message "myDeploymentDateTime: $myDeploymentDateTime"
		
		$myDeploymentDate = [datetime]::ParseExact($myDeploymentDateTime, "MMMM d, yyyy", $null).ToString("MM/dd/yyyy")
		$myDeploymentTime = "00:00:00"
		WriteLog -Message "myDeploymentDate: $myDeploymentDate"
		WriteLog -Message "myDeploymentTime: $myDeploymentTime"
		
		if ([string]::IsNullOrEmpty($computerName))
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "The ComputerName field needs to have a value"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ($computerName -eq "file")
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Wrong ComputerName"
			$Messageboxbody = "Please delete 'file' word from ComputerName field"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ([string]::IsNullOrEmpty($myNotificationEmail))
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "The Notification Email field needs to have a value"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		elseif ([string]::IsNullOrEmpty($myDeploymentType))
		{
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$ButtonType = [System.Windows.MessageBoxButton]::OK
			$MessageboxTitle = "Field missing"
			$Messageboxbody = "The Add/Remove field needs to have a value"
			$MessageIcon = [System.Windows.MessageBoxImage]::Warning
			[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		}
		else
		{
				$adddedBy = $env:username
				if ($myDeploymentType -eq "Add") { $myDeploymentType = "AddDevice" }
				if ($myDeploymentType -eq "Remove") { $myDeploymentType = "RemoveDevice" }
			
				WriteLog -Message "myComputerName: $computerName"
				WriteLog -Message "myNotificationEmail: $myNotificationEmail"
				WriteLog -Message "myDeploymentDate: $myDeploymentDate"
				WriteLog -Message "myDeploymentTime: $myDeploymentTime"
				WriteLog -Message "myDeploymentType: $myDeploymentType"
				
				if (IsValidEmail $myNotificationEmail)
				{
					for ($j = 0; $j -le $datagridviewDevice.RowCount - 1; $j++)
					{
						if ($datagridviewDevice.Rows[$j].Selected -eq "True")
						{
							$selectedCollectionName = $datagridviewDevice.Rows[$j].Cells[0].Value
							$selectedCollectionBundle = $datagridviewDevice.Rows[$j].Cells[1].Value
							#$selectedCollectionComment = $datagridviewDevice.Rows[$j].Cells[2].Value
							$selectedCollectionID = $datagridviewDevice.Rows[$j].Cells[2].Value
							
							WriteLog -Message "selectedCollectionName: $selectedCollectionName"
							WriteLog -Message "selectedCollectionSCCMComment: $selectedCollectionBundle"
							#WriteLog -Message "selectedCollectionComment: $selectedCollectionComment"
							WriteLog -Message "selectedCollectionID: $selectedCollectionID"
						
							insertDeviceDB $myDeploymentType $selectedCollectionName $selectedCollectionID $computerName $myNotificationEmail $myDeploymentDate $myDeploymentTime $adddedBy 
							
							$global:myReturnedDeviceTempOperations = getDeviceTempOperations
							displayDeviceTempOperations $global:myReturnedDeviceTempOperations
						}
					}
				}
				else
				{
					$tabcontrol1.Visible = $true
					$loadingMessage1.Visible = $false
					$loadingMessage2.Visible = $false
					$loadingMessage1.Update()
					$loadingMessage2.Update()
					
					$ButtonType = [System.Windows.MessageBoxButton]::OK
					$MessageboxTitle = "Email unknown"
					$Messageboxbody = "Please check the notification email. Doesn't look like a valid email address."
					$MessageIcon = [System.Windows.MessageBoxImage]::Warning
					[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
				}
		}
	}
	
	$tabcontrol1.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}


$buttonRemoveUserFromTemporaryQueue_Click={
	$selectedSQLId = ""	
	$totalSelection = 0
	
	WriteLog -Message "result: $result"
	$totalSelection = $datagridviewTempUsers.RowCount
	WriteLog -Message "totalSelection: $totalSelection"
	
	if ($totalSelection -gt 0)
	{
		$ButtonType = [System.Windows.MessageBoxButton]::YesNo
		$MessageboxTitle = "Confirmation"
		$Messageboxbody = "Are you sure you want to remove this entry ?"
		$MessageIcon = [System.Windows.MessageBoxImage]::Question
		$result = [System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		
		if ($result -eq "Yes")
		{
			$tabcontrol1.Visible = $false
			$loadingMessage2.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
						
			$datagridviewTempUsers.SelectedRows | ForEach-Object{
				$selectedSQLId = $_.Cells[5].Value
				WriteLog -Message "selectedSQLId: $selectedSQLId"
				
				updateDB "RemoveFromTemp" $selectedSQLId "Unknown"
				
				#$global:myReturnedUserTempOperations = getUserTempOperations
				#displayUserTempOperations $global:myReturnedUserTempOperations
			}
						
			$global:myReturnedUserTempOperations = getUserTempOperations
			displayUserTempOperations $global:myReturnedUserTempOperations
			
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
		}
	}
	else
	{
		$tabcontrol1.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Selection unknown"
		$Messageboxbody = "Please select the software"
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
}

$buttonRemoveDeviceFromTemporaryQueue_Click = {
	$selectedSQLId = ""
	$totalSelection = 0
	
	WriteLog -Message "result: $result"
	$totalSelection = $datagridviewTempDevices.RowCount
	WriteLog -Message "totalSelection: $totalSelection"
	
	if ($totalSelection -gt 0)
	{
		$ButtonType = [System.Windows.MessageBoxButton]::YesNo
		$MessageboxTitle = "Confirmation"
		$Messageboxbody = "Are you sure you want to remove this entry ?"
		$MessageIcon = [System.Windows.MessageBoxImage]::Question
		$result = [System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		
		if ($result -eq "Yes")
		{
			$tabcontrol1.Visible = $false
			$loadingMessage2.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$datagridviewTempDevices.SelectedRows | ForEach-Object{
				$selectedSQLId = $_.Cells[5].Value
				WriteLog -Message "selectedSQLId: $selectedSQLId"
				
				updateDB "RemoveFromTemp" $selectedSQLId "Unknown"
				
				#$global:myReturnedUserTempOperations = getUserTempOperations
				#displayUserTempOperations $global:myReturnedUserTempOperations
			}
			
			$global:myReturnedDeviceTempOperations = getDeviceTempOperations
			displayDeviceTempOperations $global:myReturnedDeviceTempOperations
			
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
		}
	}
	else
	{
		$tabcontrol1.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Selection unknown"
		$Messageboxbody = "Please select the software"
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
	
}

$buttonCommitUserTemporaryQueue_Click = {
	$selectedSQLId = ""
	$totalSelection = 0
	
	WriteLog -Message "CommitUserTemporaryQueue"
	$totalSelection = $datagridviewTempUsers.RowCount
	WriteLog -Message "totalSelection user collections: $totalSelection"
		
	if ($totalSelection -gt 0)
	{
		$ButtonType = [System.Windows.MessageBoxButton]::YesNo
		$MessageboxTitle = "Confirmation"
		$Messageboxbody = "Are you sure you want to commit this change to SCCM ?"
		$MessageIcon = [System.Windows.MessageBoxImage]::Question
		$result = [System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		
		if ($result -eq "Yes")
		{
			$tabcontrol1.Visible = $false
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $true
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$datagridviewTempUsers.SelectedRows | ForEach-Object{
				$myDeploymentType = $_.Cells[0].Value
				$selectedCollectionName = $_.Cells[1].Value
				$selectedUserSamID = $_.Cells[2].Value
				$selectedInstallDate = $_.Cells[3].Value
				$selectedAddedBy = $_.Cells[4].Value
				$selectedSQLId = $_.Cells[5].Value
				$selectedNotificationEmail = $_.Cells[6].Value
				$selectedUserUPN = $_.Cells[7].Value
				$selectedUserEmail = $_.Cells[8].Value
				$selectedSendUserEmail = $_.Cells[9].Value
				
				$myDeploymentDate = ($selectedInstallDate -split " ")[0]
				$myDeploymentTime = ($selectedInstallDate -split " ")[1]
				WriteLog -Message "selectedCollectionName: $selectedCollectionName"
				WriteLog -Message "selectedUserSamID: $selectedUserSamID"
				WriteLog -Message "selectedInstallDate: $selectedInstallDate"
				WriteLog -Message "selectedAddedBy: $selectedAddedBy"
				WriteLog -Message "selectedSQLId: $selectedSQLId"
				WriteLog -Message "selectedNotificationEmail: $selectedNotificationEmail"
				WriteLog -Message "selectedUserUPN: $selectedUserUPN"
				WriteLog -Message "myDeploymentDate: $myDeploymentDate"
				WriteLog -Message "myDeploymentTime: $myDeploymentTime"
				WriteLog -Message "myDeploymentType: $myDeploymentType"
				WriteLog -Message "selectedUserEmail: $selectedUserEmail"
				WriteLog -Message "selectedSendUserEmail: $selectedSendUserEmail"
								
				try
				{
					updateDB "CommitToSCCM" $selectedSQLId
				}
				catch
				{
					WriteLog -Message "Error updating DB when trying to commit User to SCCM: $_"
				}
						
			}
			
			$global:myReturnedUserTempOperations = getUserTempOperations
			displayUserTempOperations $global:myReturnedUserTempOperations
			
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
		}
	}
	else
	{
		$tabcontrol1.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Selection unknown"
		$Messageboxbody = "Please select the software"
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
}

$buttonCommitDeviceTemporaryQueue_Click = {
	$selectedSQLId = ""
	$totalSelection = 0
	
	WriteLog -Message "CommitDeviceTemporaryQueue"
	$totalSelection = $datagridviewTempDevices.RowCount
	WriteLog -Message "totalSelection device collections: $totalSelection"
	
	if ($totalSelection -gt 0)
	{
		$ButtonType = [System.Windows.MessageBoxButton]::YesNo
		$MessageboxTitle = "Confirmation"
		$Messageboxbody = "Are you sure you want to commit this change to SCCM ?"
		$MessageIcon = [System.Windows.MessageBoxImage]::Question
		$result = [System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
		
		if ($result -eq "Yes")
		{
			$tabcontrol1.Visible = $false
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $true
			$loadingMessage1.Update()
			$loadingMessage2.Update()
			
			$datagridviewTempDevices.SelectedRows | ForEach-Object{
				$selectedSQLId = $_.Cells[5].Value				
				WriteLog -Message "selectedSQLId: $selectedSQLId"
				
				try
				{
					updateDB "CommitToSCCM" $selectedSQLId
				}
				catch
				{
					WriteLog -Message "Error updating DB when trying to commit Device to SCCM: $_"
				}
			}
			
			$global:myReturnedDeviceTempOperations = getDeviceTempOperations
			displayDeviceTempOperations $global:myReturnedDeviceTempOperations
			
			$tabcontrol1.Visible = $true
			$loadingMessage1.Visible = $false
			$loadingMessage2.Visible = $false
			$loadingMessage1.Update()
			$loadingMessage2.Update()
		}
	}
	else
	{
		$tabcontrol1.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Selection unknown"
		$Messageboxbody = "Please select the software"
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
}

$buttonRefreshUserCollections_Click = {
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$datagridviewUser.Rows.Clear()
	$textboxFilterUserCollections.Text = ""
	
	$global:myReturnedUserCollections = getUserCollections
	displayUserCollections $global:myReturnedUserCollections
	
	$tabcontrol1.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}

$textboxFilterUserCollections_TextChanged = {
	$filterText = $textboxFilterUserCollections.Text
	#WriteLog -Message "filterText: $filterText"
	
	filterUserCollections $filterText $global:myReturnedUserCollections
}

$textboxFilterCurrentSCCM_TextChanged = {
	$filterText = $textboxFilterCurrentSCCM.Text
	#WriteLog -Message "filterText sccm current: $filterText"
	
	filterCurrentSCCMOperations $filterText $global:myReturnedOperations
}

$textboxFilterCompletedSCCM_TextChanged = {
	$filterText = $textboxFilterCompletedSCCM.Text
	#WriteLog -Message "filterText sccm completed: $filterText"
	
	filterCompletedSCCMOperations $filterText $global:myReturnedOperations
}

$textboxFilterFailedSCCM_TextChanged = {
	$filterText = $textboxFilterFailedSCCM.Text
	#WriteLog -Message "filterText sccm failed: $filterText"
	
	filterFailedSCCMOperations $filterText $global:myReturnedOperations
}

$buttonRefreshCurrent_Click = {
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$global:myReturnedOperations = getOperationsLastMonth
	displaySCCMCurrent $global:myReturnedOperations
	
	$tabcontrol1.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}

$buttonRefreshCompleted_Click = {
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$datagridview3.Rows.Clear()
	$global:myReturnedOperations = getOperationsLastMonth
	displaySCCMCompleted $global:myReturnedOperations
	
	$tabcontrol1.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}

$buttonRefreshFailed_Click = {
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$datagridview4.Rows.Clear()
	$global:myReturnedOperations = getOperationsLastMonth
	displaySCCMFailed $global:myReturnedOperations
	
	$tabcontrol1.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}

$picturebox1_Click={
	#TODO: Place custom script here
	
}

$labelWizardAutomatedSoftw_Click={
	#TODO: Place custom script here
	
}



function Get-FileName()
{
	[System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null
	
	$OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
	$OpenFileDialog.initialDirectory = "C:\"
	$OpenFileDialog.filter = "CSV (*.csv)| *.csv"
	$OpenFileDialog.ShowDialog() | Out-Null
	$OpenFileDialog.filename
}

$buttonImportListUsers_Click={
	WriteLog -Message "Import list button clicked"
	
	$global:importUserButtonUsed = "yes"
	$global:myUsers = @()
	
	$InputFileName = Get-FileName
	WriteLog -Message "InputFileName: $InputFileName"
	$userCollection = Import-Csv $InputFileName
	
	$headers = $userCollection[0].psobject.Properties | foreach { $_.Name }
	$header0 = $headers[0].ToString()
	$header1 = $headers[1].ToString()
	WriteLog -Message "header 1: $header0"
	WriteLog -Message "header 2: $header1"
	
	if ($header0.ToLower().Trim() -eq "samaccountname" -and $header1.ToLower().Trim() -eq "domain")
	{
		$tabcontrol1.Visible = $false
		$loadingMessage2.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		foreach ($user in $userCollection)
		{
			WriteLog -Message "user: $user"
			$samID = $user.SamAccountName
			$domain = $user.Domain
			WriteLog -Message "	samID: $samID"
			WriteLog -Message "	domain: $domain"
			
			if ([string]::IsNullOrEmpty($samID) -or [string]::IsNullOrEmpty($domain))
			{
				$ButtonType = [System.Windows.MessageBoxButton]::OK
				$MessageboxTitle = "Empty entry detected"
				$Messageboxbody = "Please be sure none of the values are empty"
				$MessageIcon = [System.Windows.MessageBoxImage]::Warning
				[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
				
				$global:importUserButtonUsed = "no"
				break
			}
			else
			{
				$user = New-Object System.Object
				$user | Add-Member -MemberType NoteProperty -Name "SamID" -Value $samID
				$user | Add-Member -MemberType NoteProperty -Name "Domain" -Value $domain
				
				$global:myUsers += $user
			}
		}
		
		if ($global:importUserButtonUsed -eq "yes")
		{
			$SamIDtxt.Text = "file"
			$buttonCheckUserCollections.Visible = $false
		}
		else
		{
			$SamIDtxt.Text = ""
			$buttonCheckUserCollections.Visible = $true
		}
		
		$tabcontrol1.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
	}
	else
	{
		$global:importUserButtonUsed = "no"
		$global:myUsers = @()
		$buttonCheckUserCollections.Visible = $true
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Wrong CSV file"
		$Messageboxbody = "Please correct the CSV file headers. First column header name should be SamAccountName and second one should be Domain."
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
}

$buttonImportListDevices_Click = {
	WriteLog -Message "Import Device list button clicked"
	
	$global:importDeviceButtonUsed = "yes"
	$global:myDevices = @()
	
	$InputFileName = Get-FileName
	WriteLog -Message "InputFileName: $InputFileName"
	$deviceCollection = Import-Csv $InputFileName
	
	$headers = $deviceCollection[0].psobject.Properties | foreach { $_.Name }
	$header0 = $headers.ToString()
	#$header1 = $headers[1].ToString()
	WriteLog -Message "header 0: $header0"
	#WriteLog -Message "header 2: $header1"
	
	if ($header0.ToLower().Trim() -eq "computername")
	{
		$tabcontrol1.Visible = $false
		$loadingMessage2.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
		
		foreach ($device in $deviceCollection)
		{
			#WriteLog -Message "user: $user"
			$computerName = $device.ComputerName
			#$domain = $user.Domain
			WriteLog -Message "	computerName: $computerName"
			#WriteLog -Message "	domain: $domain"
			
			if ([string]::IsNullOrEmpty($computerName))
			{
				$ButtonType = [System.Windows.MessageBoxButton]::OK
				$MessageboxTitle = "Empty entry detected"
				$Messageboxbody = "Please be sure you have at least one computer in the file"
				$MessageIcon = [System.Windows.MessageBoxImage]::Warning
				[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
				
				$global:importDeviceButtonUsed = "no"
				break
			}
			else
			{
				$deviceObject = New-Object System.Object
				$deviceObject | Add-Member -MemberType NoteProperty -Name "ComputerName" -Value $computerName
				
				$global:myDevices += $deviceObject
			}
		}
		
		if ($global:importDeviceButtonUsed -eq "yes")
		{
			$ComputerNametxt.Text = "file"
			$buttonCheckDeviceCollections.Visible = $false
		}
		else
		{
			$ComputerNametxt.Text = ""
			$buttonCheckDeviceCollections.Visible = $true
		}
		
		$tabcontrol1.Visible = $true
		$loadingMessage1.Visible = $false
		$loadingMessage2.Visible = $false
		$loadingMessage1.Update()
		$loadingMessage2.Update()
	}
	else
	{
		$global:importDeviceButtonUsed = "no"
		$global:myDevices = @()
		$buttonCheckDeviceCollections.Visible = $true
		
		$ButtonType = [System.Windows.MessageBoxButton]::OK
		$MessageboxTitle = "Wrong CSV file"
		$Messageboxbody = "Please correct the CSV file headers. First column name should be ComputerName."
		$MessageIcon = [System.Windows.MessageBoxImage]::Warning
		[System.Windows.MessageBox]::Show($Messageboxbody, $MessageboxTitle, $ButtonType, $messageicon)
	}
}


$loadingMessage_TextChanged={
	#TODO: Place custom script here
	
}

$loadingMessage2_Click={
	#TODO: Place custom script here
	
}

$buttonRefreshDeviceCollections_Click={
	$tabcontrol1.Visible = $false
	$loadingMessage1.Visible = $true
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
	
	$datagridviewDevice.Rows.Clear()
	$textboxFilterDeviceCollections.Text = ""
	
	$global:myReturnedDeviceCollections = getDeviceCollections
	displayDeviceCollections $global:myReturnedDeviceCollections
	
	$tabcontrol1.Visible = $true
	$loadingMessage1.Visible = $false
	$loadingMessage2.Visible = $false
	$loadingMessage1.Update()
	$loadingMessage2.Update()
}



$labelUserCollectionsTempo_Click={
	#TODO: Place custom script here
	
}

$textboxFilterDeviceCollections_TextChanged={
	#TODO: Place custom script here
	$filterText = $textboxFilterDeviceCollections.Text
	WriteLog -Message "filterText: $filterText"
	
	filterDeviceCollections $filterText $global:myReturnedDeviceCollections
}


$ComputerNametxt_TextChanged={
	#WriteLog -Message "text changed in computerName"
	$myComputerName= $ComputerNametxt.Text
		
	if ([string]::IsNullOrEmpty($myComputerName))
	{
		$buttonCheckDeviceCollections.Visible = $true
		$datagridDeviceSoftware.Rows.Clear()
	}
	elseif ($myComputerName -eq "file")
	{
		$buttonCheckDeviceCollections.Visible = $false
		$datagridDeviceSoftware.Rows.Clear()
	}
	else
	{
		$buttonCheckDeviceCollections.Visible = $true
		$datagridDeviceSoftware.Rows.Clear()
	}
}




]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>